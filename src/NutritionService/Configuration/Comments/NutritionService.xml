<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NutritionService</name>
    </assembly>
    <members>
        <member name="T:NutritionService.Common.Food">
            <summary>
            Classe que representa um alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.Id">
            <summary>
            Identitificador do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.CreatedBy">
            <summary>
            Identificador do perfil que criou o alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.UserId">
            <summary>
            Identificador do perfil que utiliza o alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.Name">
            <summary>
            Nome do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.Brand">
            <summary>
            Marca do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.BarCode">
            <summary>
            Código de barras do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.IsRevised">
            <summary>
            Classificação de revisão do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.Food.NutritionalInfo">
            <summary>
            Informações nutricionais do alimento
            </summary>
        </member>
        <member name="M:NutritionService.Common.Food.#ctor(System.String,System.String,System.String,NutritionService.Common.NutritionalInfo)">
            <summary>
            Construtor da classe Food
            </summary>
            <param name="name"></param>
            <param name="brand"></param>
            <param name="barCode"></param>
            <param name="nutritionalInfo"></param>
        </member>
        <member name="M:NutritionService.Common.Food.MarkAsRevised">
            <summary>
            Método para assinalar o alimento como revisado
            </summary>
        </member>
        <member name="M:NutritionService.Common.Food.SetId">
            <summary>
            Método para gerar um novo identificador para o alimento
            </summary>
        </member>
        <member name="M:NutritionService.Common.Food.SetCreatedBy(System.String)">
            <summary>
            Método para definir o identificador do perfil que criou o alimento
            </summary>
            <param name="createdBy"></param>
        </member>
        <member name="M:NutritionService.Common.Food.SetUserId(System.String)">
            <summary>
            Método para definir o identificador do perfil que vai utilizar a comida
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:NutritionService.Common.Food.UpdateInfo(System.String,System.String,System.String,NutritionService.Common.NutritionalInfo)">
            <summary>
            Método para atualizar as informações do alimento
            </summary>
            <param name="name"></param>
            <param name="brand"></param>
            <param name="barCode"></param>
            <param name="nutritionalInfo"></param>
        </member>
        <member name="M:NutritionService.Common.Food.Clone">
            <summary>
            Método para clonar o objeto Food
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Common.FoodDto">
            <summary>
            Classe que representa um DTO (Data Transfer Object) para o alimento
            </summary>
            <param name="food"></param>
        </member>
        <member name="M:NutritionService.Common.FoodDto.#ctor(NutritionService.Common.Food)">
            <summary>
            Classe que representa um DTO (Data Transfer Object) para o alimento
            </summary>
            <param name="food"></param>
        </member>
        <member name="P:NutritionService.Common.FoodDto.Id">
            <summary>
            Identificador do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.CreatedBy">
            <summary>
            Identificador do perfil que criou o alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.Name">
            <summary>
            Nome do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.Brand">
            <summary>
            Marca do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.BarCode">
            <summary>
            Código de barras do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.IsRevised">
            <summary>
            Classificação de revisão do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.FoodDto.NutritionalInfo">
            <summary>
            Informações nutricionais do alimento
            </summary>
        </member>
        <member name="T:NutritionService.Common.Interfaces.IHandler`2">
            <summary>
                Interface para padronizar handlers.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:NutritionService.Common.Interfaces.IHandler`2.HandleAsync(`1,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com operações.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Common.MicronutrientDetails">
            <summary>
            Classe que representa os detalhes de um micronutriente
            </summary>
            <param name="quantity"></param>
            <param name="unit"></param>
        </member>
        <member name="M:NutritionService.Common.MicronutrientDetails.#ctor(System.Double,System.String)">
            <summary>
            Classe que representa os detalhes de um micronutriente
            </summary>
            <param name="quantity"></param>
            <param name="unit"></param>
        </member>
        <member name="T:NutritionService.Common.NutritionalInfo">
            <summary>
            Classe que representa as informações nutricionais de um alimento
            </summary>
            <param name="macronutrients"></param>
            <param name="micronutrients"></param>
            <param name="vitamins"></param>
            <param name="totalMass"></param>
            <param name="servingSize"></param>
            <param name="calories"></param>
        </member>
        <member name="M:NutritionService.Common.NutritionalInfo.#ctor(NutritionService.Common.Macronutrients,System.Collections.Generic.Dictionary{System.String,NutritionService.Common.MicronutrientDetails},System.Double,System.Nullable{System.Double})">
            <summary>
            Classe que representa as informações nutricionais de um alimento
            </summary>
            <param name="macronutrients"></param>
            <param name="micronutrients"></param>
            <param name="vitamins"></param>
            <param name="totalMass"></param>
            <param name="servingSize"></param>
            <param name="calories"></param>
        </member>
        <member name="P:NutritionService.Common.NutritionalInfo.Macronutrients">
            <summary>
            Macronutrientes do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.NutritionalInfo.Micronutrients">
            <summary>
            Micronutrientes por porção do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.NutritionalInfo.ServingSize">
            <summary>
            Massa por porção do alimento
            </summary>
        </member>
        <member name="P:NutritionService.Common.NutritionalInfo.Calories">
            <summary>
            Calorias por porção do alimento
            </summary>
        </member>
        <member name="M:NutritionService.Common.NutritionalInfo.Clone">
            <summary>
            Clona as informações nutricionais, incluindo macronutrientes e micronutrientes
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.EndpointsConfiguration">
            <summary>
                Configuração dos Endpoints
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.EndpointsConfiguration.MapEndpoints(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Mapeia os endpoint.
            </summary>
            <param name="app">The app.</param>
            <param name="configuration">The configuration.</param>
            <returns>An IEndpointRouteBuilder.</returns>
        </member>
        <member name="M:NutritionService.Configuration.EndpointsConfiguration.ConfigureEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configura os endpoints.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter">
            <summary>
                Filtro para substituir a versão pela versão exata no path
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:NutritionService.Configuration.Filters.VersionHeaderFilter">
            <summary>
                Filtro para remover o parâmetro de versão da documentação
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.Filters.VersionHeaderFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:NutritionService.Configuration.MiddlewareConfiguration">
            <summary>
                Classe para configuração de middlewares
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.MiddlewareConfiguration.ConfigureMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar os middlewares
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.ServiceDependencies">
            <summary>
                Classe para resolver as dependências de serviços
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.ServiceDependencies.SolveServiceDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para resolver as dependências de serviços
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.SwaggerConfiguration">
            <summary>
                Classe para configuração do Swagger
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.SwaggerConfiguration.ConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar o Swagger
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Connections.ConnectionsModule">
            <summary>
                Modulo de conexões externas
            </summary>
        </member>
        <member name="M:NutritionService.Connections.ConnectionsModule.ConfigureConnections(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para configurar as conexões
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.Common.DailyMenuMongoRepository">
            <summary>
            Repositório para gerenciar o acesso aos dados do DailyMenu.
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.#ctor(NutritionService.Connections.NutritionDbContext)">
            <summary>
            Repositório para gerenciar o acesso aos dados do DailyMenu.
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.GetDailyMenuDetailsAsync(System.String)">
            <summary>
            Método para buscar um DailyMenu pelo ID.
            </summary>
            <param name="dailyMenuId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.InsertDailyMenuAsync(NutritionService.DailyMenu.DailyMenu)">
            <summary>
            Método para inserir um DailyMenu.
            </summary>
            <param name="dailyMenu"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.UpdateDailyMenuAsync(NutritionService.DailyMenu.DailyMenu)">
            <summary>
            Método para atualizar um DailyMenu.
            </summary>
            <param name="updatedDailyMenu"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.DeleteDailyMenuAsync(System.String)">
            <summary>
            Método para deletar um DailyMenu.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.ListDailyMenusAsync(System.Nullable{System.DayOfWeek},System.Int32,System.Int32,System.String)">
            <summary>
            Consulta filtrada, com paginação e possibilidade de buscar menus sem dia definido
            </summary>
            <param name="dayOfWeek"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.DailyMenuMongoRepository.ListDailyMenusAsync(System.Int32,System.Int32,System.String)">
            <summary>
            Consulta completa sem filtro
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository">
            <summary>
            Interface para o repositório de DailyMenu.
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.GetDailyMenuDetailsAsync(System.String)">
            <summary>
            Método para obter um DailyMenu pelo seu ID.
            </summary>
            <param name="dailyMenuId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.InsertDailyMenuAsync(NutritionService.DailyMenu.DailyMenu)">
            <summary>
            Método para inserir um DailyMenu.
            </summary>
            <param name="dailyMenu"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.UpdateDailyMenuAsync(NutritionService.DailyMenu.DailyMenu)">
            <summary>
            Método para atualizar um DailyMenu.
            </summary>
            <param name="updatedDailyMenu"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.DeleteDailyMenuAsync(System.String)">
            <summary>
            Método para deletar um DailyMenu.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.ListDailyMenusAsync(System.Nullable{System.DayOfWeek},System.Int32,System.Int32,System.String)">
            <summary>
            Método para listar os DailyMenus, filtrando por dia da semana.
            </summary>
            <param name="dayOfWeek"></param>
            <param name="page"></param>
            <param name="size"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.Common.IDailyMenuMongoRepository.ListDailyMenusAsync(System.Int32,System.Int32,System.String)">
            <summary>
            Método para listar os DailyMenus, sem filtro.
            </summary>
            <param name="page"></param>
            <param name="size"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.CreateDailyMenuForDifferentUser.CreateDailyMenuForDifferentUserCommand.#ctor(System.Nullable{System.DayOfWeek},System.String[])">
            <summary>
            Creates a command to create a daily menu.
            </summary>
            <param name="dayOfWeek"></param>
            <param name="mealIds"></param>
            <param name="userId"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.CreateDailyMenuForDifferentUser.CreateDailyMenuForDifferentUserCommandHandler.HandleAsync(NutritionService.DailyMenu.CreateDailyMenuForDifferentUser.CreateDailyMenuForDifferentUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a daily menu.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommand.#ctor(System.Nullable{System.DayOfWeek},System.String[])">
            <summary>
            Creates a command to create a daily menu.
            </summary>
            <param name="dayOfWeek"></param>
            <param name="mealIds"></param>
        </member>
        <member name="T:NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommandHandler">
            <summary>
            Handles the creation of a daily menu.
            </summary>
            <param name="dailyMenuRepository"></param>
            <param name="mealRepository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommandHandler.#ctor(NutritionService.DailyMenu.Common.IDailyMenuMongoRepository,NutritionService.Meal.Common.IMealMongoRepository)">
            <summary>
            Handles the creation of a daily menu.
            </summary>
            <param name="dailyMenuRepository"></param>
            <param name="mealRepository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommandHandler.HandleAsync(NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a daily menu.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.DailyMenu">
            <summary>
            Classe que representa um cardápio diário
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenu.Id">
            <summary>
            Identificador do cardápio
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenu.CreatedBy">
            <summary>
            Identificador do perfil que criou o cardápio
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenu.UserId">
            <summary>
            Identificador do perfil que utiliza o cardápio
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenu.DayOfWeek">
            <summary>
            Dia da Semana
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenu.Meals">
            <summary>
            Lista de refeições do dia
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.#ctor(System.Nullable{System.DayOfWeek},System.Collections.Generic.List{NutritionService.Meal.Meal})">
            <summary>
            Construtor da classe DailyMenu
            </summary>
            <param name="dayOfWeek"></param>
            <param name="meals"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.SetId">
            <summary>
            Método para gerar um novo ID para o cardápio
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.SetCreatedBy(System.String)">
            <summary>
            Método para definir o identificador do perfil que criou o cardápio
            </summary>
            <param name="createdBy"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.SetUserId(System.String)">
            <summary>
            Método para definir o identificador do perfil que vai utilizar o cardápio
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.UpdateInfo(System.Nullable{System.DayOfWeek},System.Collections.Generic.List{NutritionService.Meal.Meal})">
            <summary>
            Método para atualizar as informações do cardápio diário
            </summary>
            <param name="dayOfWeek"></param>
            <param name="meals"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenu.Clone">
            <summary>
            Método para clonar o cardápio diário
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.DailyMenuController">
            <summary>
            Controlador para gerenciar o cardápio diário.
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.CreateDailyMenuForSameUser(NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.DailyMenu.DailyMenuDto,NutritionService.DailyMenu.CreateDailyMenuForSameUser.CreateDailyMenuForSameUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para criar um novo cardápio diário para o usuário logado.
            </summary>
            <param name="forSameUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.CreateDailyMenuForDifferentUser(System.String,NutritionService.DailyMenu.CreateDailyMenuForDifferentUser.CreateDailyMenuForDifferentUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.DailyMenu.DailyMenuDto,NutritionService.DailyMenu.CreateDailyMenuForDifferentUser.CreateDailyMenuForDifferentUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para Criar um cardápio diário para outro usuario
            </summary>
            <param name="userId"></param>
            <param name="forDifferentUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.DeleteDailyMenu(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.DailyMenu.DeleteDailyMenu.DeleteDailyMenuCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para deletar um cardápio diário.
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.EditDailyMenu(System.String,NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommand,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para editar um cardápio diário.
            </summary>
            <param name="id"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.GetDailyMenuDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.DailyMenu.DailyMenuDto,NutritionService.DailyMenu.GetDailyMenuDetails.GetDailyMenuDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para obter os detalhes de um cardápio diário específico.
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuController.ListDailyMenus(System.String,NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.DailyMenu.DailyMenuDto},NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar os cardápios diários com base em critérios de pesquisa.
            </summary>
            <param name="userId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.DailyMenuDto">
            <summary>
            DTO para representar um menu diário.
            </summary>
            <param name="dailyMenu"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuDto.#ctor(NutritionService.DailyMenu.DailyMenu)">
            <summary>
            DTO para representar um menu diário.
            </summary>
            <param name="dailyMenu"></param>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenuDto.Id">
            <summary>
            Identificador único do menu diário.
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenuDto.CreatedBy">
            <summary>
            Identificador do usuário que criou o menu diário.
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenuDto.DayOfWeek">
            <summary>
            Dia da semana do menu diário.
            </summary>
        </member>
        <member name="P:NutritionService.DailyMenu.DailyMenuDto.Meals">
            <summary>
            Lista de refeições do menu diário.
            </summary>
        </member>
        <member name="T:NutritionService.DailyMenu.DailyMenuModule">
            <summary>
            Módulo para resolver as dependências do Cardápio Diário.
            </summary>
        </member>
        <member name="M:NutritionService.DailyMenu.DailyMenuModule.ConfigureDailyMenuRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Método de extensão para configurar as dependências do módulo de Cardápio Diário.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.DailyMenu.DeleteDailyMenu.DeleteDailyMenuCommandHandler">
            <summary>
            Handles the deletion of a daily menu.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DeleteDailyMenu.DeleteDailyMenuCommandHandler.#ctor(NutritionService.DailyMenu.Common.IDailyMenuMongoRepository)">
            <summary>
            Handles the deletion of a daily menu.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.DeleteDailyMenu.DeleteDailyMenuCommandHandler.HandleAsync(NutritionService.DailyMenu.DeleteDailyMenu.DeleteDailyMenuCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the deletion of a daily menu by its ID.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommandHandler">
            <summary>
            Handles the editing of an existing daily menu.
            </summary>
            <param name="dailyMenuRepository"></param>
            <param name="mealRepository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommandHandler.#ctor(NutritionService.DailyMenu.Common.IDailyMenuMongoRepository,NutritionService.Meal.Common.IMealMongoRepository)">
            <summary>
            Handles the editing of an existing daily menu.
            </summary>
            <param name="dailyMenuRepository"></param>
            <param name="mealRepository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommandHandler.HandleAsync(NutritionService.DailyMenu.EditDailyMenu.EditDailyMenuCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the editing of an existing daily menu based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.DailyMenu.GetDailyMenuDetails.GetDailyMenuDetailsQueryHandler">
            <summary>
            Handles the retrieval of daily menu details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.GetDailyMenuDetails.GetDailyMenuDetailsQueryHandler.#ctor(NutritionService.DailyMenu.Common.IDailyMenuMongoRepository)">
            <summary>
            Handles the retrieval of daily menu details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.GetDailyMenuDetails.GetDailyMenuDetailsQueryHandler.HandleAsync(NutritionService.DailyMenu.GetDailyMenuDetails.GetDailyMenuDetailsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of daily menu details based on the provided query.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQueryHandler">
            <summary>
            ListDailyMenuQueryHandler handles the query to list daily menus.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQueryHandler.#ctor(NutritionService.DailyMenu.Common.IDailyMenuMongoRepository)">
            <summary>
            ListDailyMenuQueryHandler handles the query to list daily menus.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQueryHandler.HandleAsync(NutritionService.DailyMenu.ListDailyMenus.ListDailyMenuQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of daily menus based on the provided query parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:NutritionService.Dish.Common.Repository.DishMongoRepository">
            <summary>
            Repositório para gerenciar operações de CRUD para pratos no MongoDB.
            </summary>
        </member>
        <member name="M:NutritionService.Dish.Common.Repository.DishMongoRepository.#ctor(NutritionService.Connections.NutritionDbContext)">
            <summary>
            Repositório para gerenciar operações de CRUD para pratos no MongoDB.
            </summary>
        </member>
        <member name="T:NutritionService.Dish.Common.Repository.IDishMongoRepository">
            <summary>
            Interface para o repositório de pratos no MongoDB.
            </summary>
        </member>
        <member name="M:NutritionService.Dish.CreateDishForDifferentUser.CreateDishForDifferentUserCommandHandler.HandleAsync(NutritionService.Dish.CreateDishForDifferentUser.CreateDishForDifferentUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a new dish based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommandHandler">
            <summary>
            Handles the creation of a new dish.
            </summary>
            <param name="dishRepository"></param>
            <param name="userFoodRepository"></param>
        </member>
        <member name="M:NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommandHandler.#ctor(NutritionService.Dish.Common.Repository.IDishMongoRepository,NutritionService.UserFood.Common.Repository.IUserFoodMongoRepository)">
            <summary>
            Handles the creation of a new dish.
            </summary>
            <param name="dishRepository"></param>
            <param name="userFoodRepository"></param>
        </member>
        <member name="M:NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommandHandler.HandleAsync(NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a new dish based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Dish.DeleteDish.DeleteDishCommandHandler">
            <summary>
            Handles the deletion of a dish.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.DeleteDish.DeleteDishCommandHandler.#ctor(NutritionService.Dish.Common.Repository.IDishMongoRepository)">
            <summary>
            Handles the deletion of a dish.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.DeleteDish.DeleteDishCommandHandler.HandleAsync(NutritionService.Dish.DeleteDish.DeleteDishCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the deletion of a dish by its ID.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Dish.Dish">
            <summary>
            Classe que representa um prato
            </summary>
        </member>
        <member name="P:NutritionService.Dish.Dish.Id">
            <summary>
            Identificador do prato
            </summary>
        </member>
        <member name="P:NutritionService.Dish.Dish.CreatedBy">
            <summary>
            Identificador do perfil que criou o prato
            </summary>
        </member>
        <member name="P:NutritionService.Dish.Dish.UserId">
            <summary>
            Identificador do perfil que utiliza o cardápio
            </summary>
        </member>
        <member name="P:NutritionService.Dish.Dish.Name">
            <summary>
            Nome do prato
            </summary>
        </member>
        <member name="P:NutritionService.Dish.Dish.Foods">
             <summary>
            Lista de ingredientes (alimentos) do prato
             </summary>
        </member>
        <member name="M:NutritionService.Dish.Dish.SetId">
            <summary>
            Método para gerar um novo ID para o prato
            </summary>
        </member>
        <member name="M:NutritionService.Dish.Dish.SetCreatedBy(System.String)">
            <summary>
            Método para definir o identificador do perfil que criou o prato
            </summary>
            <param name="createdBy"></param>
        </member>
        <member name="M:NutritionService.Dish.Dish.SetUserId(System.String)">
            <summary>
            Método para definir o identificador do perfil que vai utilizar o cardápio
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:NutritionService.Dish.Dish.Clone">
            <summary>
            Método para clonar o prato
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Dish.DishController">
            <summary>
            Controller para o gerenciamento de pratos
            </summary>
        </member>
        <member name="M:NutritionService.Dish.DishController.GetDishDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Dish.DishDto,NutritionService.Dish.GetDishDetails.GetDishDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para obter detalhes de um prato
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Dish.DishController.ListDishes(System.String,NutritionService.Dish.ListDishes.ListDishesQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Dish.DishDto},NutritionService.Dish.ListDishes.ListDishesQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar pratos
            </summary>
            <param name="userId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Dish.DishController.CreateDishForSameUser(NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.Dish.DishDto,NutritionService.Dish.CreateDishForSameUser.CreateDishForSameUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para criar um prato
            </summary>
            <param name="forSameUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Dish.DishController.CreateDishForDifferentUser(System.String,NutritionService.Dish.CreateDishForDifferentUser.CreateDishForDifferentUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.Dish.DishDto,NutritionService.Dish.CreateDishForDifferentUser.CreateDishForDifferentUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para criar um prato
            </summary>
            <param name="userId"></param>
            <param name="forDifferentUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Dish.DishController.EditDish(System.String,NutritionService.Dish.EditDish.EditDishCommand,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.Dish.EditDish.EditDishCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para atualizar um prato
            </summary>
            <param name="id"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Dish.DishController.DeleteDish(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.Dish.DeleteDish.DeleteDishCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para deletar um prato
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Dish.DishDto">
            <summary>
            DTO para representar um prato.
            </summary>
            <param name="dish"></param>
        </member>
        <member name="M:NutritionService.Dish.DishDto.#ctor(NutritionService.Dish.Dish)">
            <summary>
            DTO para representar um prato.
            </summary>
            <param name="dish"></param>
        </member>
        <member name="P:NutritionService.Dish.DishDto.Id">
            <summary>
            Identificador único do prato.
            </summary>
        </member>
        <member name="P:NutritionService.Dish.DishDto.CreatedBy">
            <summary>
            Identificador do usuário que criou o prato.
            </summary>
        </member>
        <member name="P:NutritionService.Dish.DishDto.Name">
            <summary>
            Nome do prato.
            </summary>
        </member>
        <member name="P:NutritionService.Dish.DishDto.Foods">
            <summary>
            Descrição do prato.
            </summary>
        </member>
        <member name="T:NutritionService.Dish.DishModule">
            <summary>
            Módulo para resolver as dependências relacionadas a pratos.
            </summary>
        </member>
        <member name="M:NutritionService.Dish.DishModule.ConfigureDishRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Método de extensão para configurar as dependências do módulo de pratos.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Dish.EditDish.EditDishCommandHandler">
            <summary>
            Handles the command to edit an existing dish.
            </summary>
            <param name="dishRepository"></param>
            <param name="foodRepository"></param>
        </member>
        <member name="M:NutritionService.Dish.EditDish.EditDishCommandHandler.#ctor(NutritionService.Dish.Common.Repository.IDishMongoRepository,NutritionService.UserFood.Common.Repository.IUserFoodMongoRepository)">
            <summary>
            Handles the command to edit an existing dish.
            </summary>
            <param name="dishRepository"></param>
            <param name="foodRepository"></param>
        </member>
        <member name="M:NutritionService.Dish.EditDish.EditDishCommandHandler.HandleAsync(NutritionService.Dish.EditDish.EditDishCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command to edit an existing dish by updating its name and associated food items.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Dish.GetDishDetails.GetDishDetailsQueryHandler">
            <summary>
            Handles the retrieval of dish details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.GetDishDetails.GetDishDetailsQueryHandler.#ctor(NutritionService.Dish.Common.Repository.IDishMongoRepository)">
            <summary>
            Handles the retrieval of dish details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.GetDishDetails.GetDishDetailsQueryHandler.HandleAsync(NutritionService.Dish.GetDishDetails.GetDishDetailsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of dish details based on the provided query.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Dish.ListDishes.ListDishesQueryHandler">
            <summary>
            ListDishesQueryHandler handles the query to list dishes.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.ListDishes.ListDishesQueryHandler.#ctor(NutritionService.Dish.Common.Repository.IDishMongoRepository)">
            <summary>
            ListDishesQueryHandler handles the query to list dishes.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Dish.ListDishes.ListDishesQueryHandler.HandleAsync(NutritionService.Dish.ListDishes.ListDishesQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of dishes based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Exceptions.FoodAlreadyExistsException">
            <summary>
                Exceção para quando um alimento já existe
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.FoodAlreadyExistsException.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.FoodAlreadyExistsException.#ctor(System.String)">
            <summary>
                Construtor com mensagem
            </summary>
            <param name="barcode"></param>
        </member>
        <member name="T:NutritionService.Meal.Common.Enums.MealType">
            <summary>
            Tipo de refeição
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.Breakfast">
            <summary>
            Café da manhã
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.MorningSnack">
            <summary>
            Lanche da manhã
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.Lunch">
            <summary>
            Almoço
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.AfternoonSnack">
            <summary>
            Lanche da tarde
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.Dinner">
            <summary>
            Jantar
            </summary>
        </member>
        <member name="F:NutritionService.Meal.Common.Enums.MealType.Supper">
            <summary>
            Ceia
            </summary>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.GetMealByIdAsync(System.String)">
            <summary>
            Método para buscar uma refeição pelo ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.InsertMealAsync(NutritionService.Meal.Meal)">
            <summary>
            Método para inserir uma refeição.
            </summary>
            <param name="meal"></param>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.UpdateMealAsync(NutritionService.Meal.Meal)">
            <summary>
            Método para atualizar uma refeição.
            </summary>
            <param name="updatedMeal"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.DeleteMealAsync(System.String)">
            <summary>
            Método para deletar uma refeição pelo ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.GetManyMealsByIdsAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Método para buscar várias refeições por seus IDs.
            </summary>
            <param name="itemMealIds"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.Common.MealMongoRepository.ListMealsAsync(System.Int32,System.Int32,System.Threading.CancellationToken,System.String)">
            <summary>
            Método para listar refeições com paginação.
            </summary>
            <param name="itemPage"></param>
            <param name="itemRows"></param>
            <param name="cancellationToken"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.CreateMealForDifferentUser.CreateMealForDifferentUserCommandHandler.HandleAsync(NutritionService.Meal.CreateMealForDifferentUser.CreateMealForDifferentUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a new meal based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommandHandler">
            <summary>
            Handles the creation of a new meal.
            </summary>
            <param name="mealRepository"></param>
            <param name="userFoodRepository"></param>
            <param name="dishRepository"></param>
        </member>
        <member name="M:NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommandHandler.#ctor(NutritionService.Meal.Common.IMealMongoRepository,NutritionService.UserFood.Common.Repository.IUserFoodMongoRepository,NutritionService.Dish.Common.Repository.IDishMongoRepository)">
            <summary>
            Handles the creation of a new meal.
            </summary>
            <param name="mealRepository"></param>
            <param name="userFoodRepository"></param>
            <param name="dishRepository"></param>
        </member>
        <member name="M:NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommandHandler.HandleAsync(NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of a new meal based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Meal.DeleteMeal.DeleteMealCommandHandler">
            <summary>
            Handles the deletion of a meal.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.DeleteMeal.DeleteMealCommandHandler.#ctor(NutritionService.Meal.Common.IMealMongoRepository)">
            <summary>
            Handles the deletion of a meal.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.DeleteMeal.DeleteMealCommandHandler.HandleAsync(NutritionService.Meal.DeleteMeal.DeleteMealCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the deletion of a meal by its ID.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Meal.EditMeal.EditMealCommandHandler">
            <summary>
            Handles the editing of an existing meal.
            </summary>
            <param name="repository"></param>
            <param name="userFoodRepository"></param>
            <param name="dishRepository"></param>
        </member>
        <member name="M:NutritionService.Meal.EditMeal.EditMealCommandHandler.#ctor(NutritionService.Meal.Common.IMealMongoRepository,NutritionService.UserFood.Common.Repository.IUserFoodMongoRepository,NutritionService.Dish.Common.Repository.IDishMongoRepository)">
            <summary>
            Handles the editing of an existing meal.
            </summary>
            <param name="repository"></param>
            <param name="userFoodRepository"></param>
            <param name="dishRepository"></param>
        </member>
        <member name="M:NutritionService.Meal.EditMeal.EditMealCommandHandler.HandleAsync(NutritionService.Meal.EditMeal.EditMealCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command to edit an existing meal by updating its type, name, dishes, and foods.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Meal.GetMealDetails.GetMealDetailsQueryHandler">
            <summary>
            Handles the retrieval of meal details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.GetMealDetails.GetMealDetailsQueryHandler.#ctor(NutritionService.Meal.Common.IMealMongoRepository)">
            <summary>
            Handles the retrieval of meal details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.GetMealDetails.GetMealDetailsQueryHandler.HandleAsync(NutritionService.Meal.GetMealDetails.GetMealDetailsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of meal details based on the provided query.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.Meal.ListMeals.ListMealsQueryHandler">
            <summary>
            ListMealsQueryHandler handles the query to list meals.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.ListMeals.ListMealsQueryHandler.#ctor(NutritionService.Meal.Common.IMealMongoRepository)">
            <summary>
            ListMealsQueryHandler handles the query to list meals.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.Meal.ListMeals.ListMealsQueryHandler.HandleAsync(NutritionService.Meal.ListMeals.ListMealsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of meals based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Meal.Meal">
            <summary>
            Classe que representa uma refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.Id">
            <summary>
            Identificador da refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.CreatedBy">
            <summary>
            Identificador do perfil que criou a refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.UserId">
            <summary>
            Identificador do perfil que utiliza a refeicao
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.Type">
            <summary>
            Tipo da refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.Name">
            <summary>
            Nome da refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.Dishes">
            <summary>
            Lista de pratos que compoe a refeição
            </summary>
        </member>
        <member name="P:NutritionService.Meal.Meal.Foods">
            <summary>
            Lista de alimentos que compõe a refeição
            </summary>
        </member>
        <member name="M:NutritionService.Meal.Meal.#ctor(NutritionService.Meal.Common.Enums.MealType,System.String,System.Collections.Generic.List{NutritionService.Dish.Dish},System.Collections.Generic.List{NutritionService.Common.Food})">
            <summary>
            Construtor da classe Meal
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="dishes"></param>
            <param name="foods"></param>
        </member>
        <member name="M:NutritionService.Meal.Meal.SetId">
            <summary>
            Método para gerar um novo ID para a refeição
            </summary>
        </member>
        <member name="M:NutritionService.Meal.Meal.SetCreatedBy(System.String)">
            <summary>
            Método para definir o identificador do perfil que criou a refeição
            </summary>
            <param name="createdBy"></param>
        </member>
        <member name="M:NutritionService.Meal.Meal.SetUserId(System.String)">
            <summary>
            Método para definir o identificador do perfil que vai utilizar a refeicao
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:NutritionService.Meal.Meal.UpdateInfo(NutritionService.Meal.Common.Enums.MealType,System.String,System.Collections.Generic.List{NutritionService.Dish.Dish},System.Collections.Generic.List{NutritionService.Common.Food})">
            <summary>
            Método para atualizar as informações da refeição
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="dishes"></param>
            <param name="foods"></param>
        </member>
        <member name="M:NutritionService.Meal.Meal.Clone">
            <summary>
            Clona a refeição atual, criando uma nova instância com os mesmos valores.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Meal.MealController">
            <summary>
            Classe responsável por gerenciar as refeições.
            </summary>
        </member>
        <member name="M:NutritionService.Meal.MealController.CreateMealForSameUser(NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.Meal.MealDto,NutritionService.Meal.CreateMealForSameUser.CreateMealForSameUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por criar uma refeição.
            </summary>
            <param name="forSameUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.MealController.CreateMealForDifferentUser(System.String,NutritionService.Meal.CreateMealForDifferentUser.CreateMealForDifferentUserCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.Meal.MealDto,NutritionService.Meal.CreateMealForDifferentUser.CreateMealForDifferentUserCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por criar uma refeição.
            </summary>
            <param name="userId"></param>
            <param name="forDifferentUserCommand"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.MealController.Delete(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.Meal.DeleteMeal.DeleteMealCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por apagar uma refeição.
            </summary>
            <param name="mealId"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.MealController.EditMeal(System.String,NutritionService.Meal.EditMeal.EditMealCommand,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.Meal.EditMeal.EditMealCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por editar uma refeição.
            </summary>
            <param name="mealId"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.MealController.GetMealDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Meal.MealDto,NutritionService.Meal.GetMealDetails.GetMealDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por buscar uma refeição.
            </summary>
            <param name="mealId"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Meal.MealController.ListMeals(System.String,NutritionService.Meal.ListMeals.ListMealsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Meal.MealDto},NutritionService.Meal.ListMeals.ListMealsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por listar as refeições do usuário.
            </summary>
            <param name="userId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Meal.MealModule">
            <summary>
            Módulo para resolver as dependências do serviço de refeições.
            </summary>
        </member>
        <member name="M:NutritionService.Meal.MealModule.ConfigureMealRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Método de extensão para configurar as dependências relacionadas a refeições.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Middleware.ExceptionMiddleware">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NutritionService.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{NutritionService.Middleware.ExceptionMiddleware})">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NutritionService.Middleware.ExceptionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                Método para invocar o middleware
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommand">
            <summary>
            Command to approve a public food item.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommand.#ctor(System.String)">
            <summary>
            Command to approve a public food item.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommand.Id">
            <summary>
            Identifier of the public food to approve.
            </summary>
        </member>
        <member name="T:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommandHandler">
            <summary>
            Handles the approval of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommandHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the approval of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommandHandler.HandleAsync(NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the approval of a public food item.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.PublicFood.DeletePublicFood.DeletePublicFoodCommandHandler">
            <summary>
            Handles the deletion of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.DeletePublicFood.DeletePublicFoodCommandHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the deletion of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.DeletePublicFood.DeletePublicFoodCommandHandler.HandleAsync(NutritionService.PublicFood.DeletePublicFood.DeletePublicFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the deletion of a public food item by its ID.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommandHandler">
            <summary>
            Command handler for editing public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommandHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Command handler for editing public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommandHandler.HandleAsync(NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command to edit a public food item.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery">
            <summary>
            Represents a query to retrieve public food information by its barcode.
            </summary>
        </member>
        <member name="P:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery.BarCode">
            <summary>
            The barcode of the food item to be retrieved.
            </summary>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery.#ctor(System.String)">
            <summary>
            Constructor for GetPublicFoodByBarCodeQuery
            </summary>
            <param name="barCode"></param>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery.#ctor">
            <summary>
            Default constructor for GetPublicFoodByBarCodeQuery
            </summary>
        </member>
        <member name="T:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQueryHandler">
            <summary>
            Handles the query to get public food details by bar code.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQueryHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the query to get public food details by bar code.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQueryHandler.HandleAsync(NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the query to retrieve public food details by its bar code.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.PublicFood.GetPublicFoodDetails.GetPublicFoodDetailsQueryHandler">
            <summary>
            Handles the retrieval of public food details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodDetails.GetPublicFoodDetailsQueryHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the retrieval of public food details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.GetPublicFoodDetails.GetPublicFoodDetailsQueryHandler.HandleAsync(NutritionService.PublicFood.GetPublicFoodDetails.GetPublicFoodDetailsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of public food details based on the provided query.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="M:NutritionService.PublicFood.ListCreatedByUserPublicFoods.ListCreatedByUserPublicFoodsQueryHandler.HandleAsync(NutritionService.PublicFood.ListCreatedByUserPublicFoods.ListCreatedByUserPublicFoodsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of public food items based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQueryHandler">
            <summary>
            Handles the listing of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQueryHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the listing of public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQueryHandler.HandleAsync(NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of public food items based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQueryHandler">
            <summary>
            Handles the listing of revised public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQueryHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the listing of revised public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQueryHandler.HandleAsync(NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of revised public food items based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQueryHandler">
            <summary>
            Handles the listing of unrevised public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQueryHandler.#ctor(NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Handles the listing of unrevised public food items.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQueryHandler.HandleAsync(NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of unrevised public food items based on pagination parameters.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.ListUsedByUserPublicFoods.ListUsedByUserPublicFoodsQueryHandler.HandleAsync(NutritionService.PublicFood.ListUsedByUserPublicFoods.ListUsedByUserPublicFoodsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of public food items based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.PublicFood.PublicFoodController">
            <summary>
            Controller responsible for managing public foods
            </summary>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ListPublicFoods(NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.PublicFood.ListPublicFoods.ListPublicFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas públicas
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ListCreatedByUserPublicFoods(NutritionService.PublicFood.ListCreatedByUserPublicFoods.ListCreatedByUserPublicFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.PublicFood.ListCreatedByUserPublicFoods.ListCreatedByUserPublicFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas publicas criadas pelo usuario logado
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ListUsedByUserPublicFoods(System.String,NutritionService.PublicFood.ListUsedByUserPublicFoods.ListUsedByUserPublicFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.PublicFood.ListUsedByUserPublicFoods.ListUsedByUserPublicFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas publicas criadas pelo usuario logado
            </summary>
            <param name="userId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.GetPublicFoodDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.PublicFood.GetPublicFoodDetails.GetPublicFoodDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para obter detalhes de uma comida pública
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ListUnrevisedPublicFoods(NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.PublicFood.ListUnrevisedPublicFoods.ListUnrevisedPublicFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas públicas não revisadas
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ListRevisedPublicFoods(NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.PublicFood.ListRevisedPublicFoods.ListRevisedPublicFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas públicas revisadas
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.CreatePublicFood(System.String,NutritionService.PublicFood.CreatePublicFood.CreatePublicFoodCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.PublicFood.CreatePublicFood.CreatePublicFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para criar uma comida pública
            </summary>
            <param name="userId"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.EditPublicFood(System.String,NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommand,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.PublicFood.EditPublicFood.EditPublicFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para editar uma comida pública
            </summary>
            <param name="id"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.DeletePublicFood(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.PublicFood.DeletePublicFood.DeletePublicFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para deletar uma comida pública
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.ApprovePublicFood(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.PublicFood.ApprovePublicFood.ApprovePublicFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para aprovar uma comida pública
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.PublicFood.PublicFoodController.GetPublicFoodByBarCode(NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.PublicFood.GetPublicFoodByBarCode.GetPublicFoodByBarCodeQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para obter uma comida pública pelo código de barras
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.PublicFood.PublicFoodModule">
            <summary>
                Modulo para resolver as dependências relacionadas a comidas públicas
            </summary>
        </member>
        <member name="T:NutritionService.UserFood.ApproveUserFood.ApproveUserFoodCommand">
            <summary>
            Command to approve user food.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:NutritionService.UserFood.ApproveUserFood.ApproveUserFoodCommand.#ctor(System.String)">
            <summary>
            Command to approve user food.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:NutritionService.UserFood.ApproveUserFood.ApproveUserFoodCommand.Id">
            <summary>
            Identifier of the user food to approve.
            </summary>
        </member>
        <member name="M:NutritionService.UserFood.EditUserFood.EditUserFoodCommandHandler.HandleAsync(NutritionService.UserFood.EditUserFood.EditUserFoodCommand,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="P:NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery.BarCode">
            <summary>
            Barcode of the food item to retrieve.
            </summary>
        </member>
        <member name="M:NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery"/> class.
            </summary>
            <param name="barCode">The barcode of the food item.</param>
        </member>
        <member name="M:NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery.#ctor">
            <summary>
            Default constructor for <see cref="T:NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery"/>.
            </summary>
        </member>
        <member name="T:NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommandHandler">
            <summary>
            Command handler to insert public foods into user food collection.
            </summary>
            <param name="userFoodMongoRepository"></param>
            <param name="publicFoodMongoRepository"></param>
        </member>
        <member name="M:NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommandHandler.#ctor(NutritionService.UserFood.Common.Repository.IUserFoodMongoRepository,NutritionService.PublicFood.Common.Repository.IPublicFoodMongoRepository)">
            <summary>
            Command handler to insert public foods into user food collection.
            </summary>
            <param name="userFoodMongoRepository"></param>
            <param name="publicFoodMongoRepository"></param>
        </member>
        <member name="M:NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommandHandler.HandleAsync(NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the insertion of public foods into the user's food collection.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserFood.UserFoodController">
            <summary>
                Controller responsável por gerenciar comidas
            </summary>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.ListUserFoods(System.String,NutritionService.UserFood.ListFoods.ListFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.UserFood.ListFoods.ListFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas
            </summary>
            <param name="userId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.GetUserFoodDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.UserFood.GetUserFoodDetails.GetUserFoodDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para pegar detalhes de uma comida
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.CreateUserFood(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.UserFood.CreateUserFood.CreateUserFoodCommand},NutritionService.UserFood.CreateUserFood.CreateUserFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Rota para criar uma comida
            </summary>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.EditUserFood(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.UserFood.EditUserFood.EditUserFoodCommand},NutritionService.UserFood.EditUserFood.EditUserFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Rota para editar uma comida
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.InsertPublicFoods(System.String,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Common.FoodDto},NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommand},NutritionService.UserFood.InsertPublicFoodsInUserFood.InsertPublicFoodsInUserFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Rota para inserir comidas públicas na lista de comidas do usuário
            </summary>
            <param name="userId"></param>
            <param name="handler"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.ApproveUserFood(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.UserFood.ApproveUserFood.ApproveUserFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para aprovar uma comida, e marcar como revisada
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.DeleteUserFood(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.UserFood.DeleteUserFood.DeleteUserFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para deletar uma comida
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodController.GetUserFoodByBarCode(NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery,NutritionService.Common.Interfaces.IHandler{NutritionService.Common.FoodDto,NutritionService.UserFood.GetUserFoodByBarCode.GetUserFoodByBarCodeQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para buscar uma comida privada pelo código de barras
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserFood.UserFoodModule">
            <summary>
                Modulo para resolver as dependências relacionadas a comidas
            </summary>
        </member>
        <member name="M:NutritionService.UserFood.UserFoodModule.ConfigureUserFoodRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a comidas
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommandHandler">
            <summary>
            Handles the creation of user nutrition based on a daily menu.
            </summary>
            <param name="userNutritionRepository"></param>
            <param name="dailyMenuRepository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommandHandler.#ctor(NutritionService.UserNutrition.Common.Repository.IUserNutritionMongoRepository,NutritionService.DailyMenu.Common.IDailyMenuMongoRepository)">
            <summary>
            Handles the creation of user nutrition based on a daily menu.
            </summary>
            <param name="userNutritionRepository"></param>
            <param name="dailyMenuRepository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommandHandler.HandleAsync(NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the creation of user nutrition based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserNutrition.DeleteUserNutrition.DeleteUserNutritionCommandHandler">
            <summary>
            Handles the deletion of a user's nutrition record.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.DeleteUserNutrition.DeleteUserNutritionCommandHandler.#ctor(NutritionService.UserNutrition.Common.Repository.IUserNutritionMongoRepository)">
            <summary>
            Handles the deletion of a user's nutrition record.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.DeleteUserNutrition.DeleteUserNutritionCommandHandler.HandleAsync(NutritionService.UserNutrition.DeleteUserNutrition.DeleteUserNutritionCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the deletion of a user's nutrition record based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommandHandler">
            <summary>
            Handles the editing of user nutrition details.
            </summary>
            <param name="userNutritionRepository"></param>
            <param name="dailyMenuRepository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommandHandler.#ctor(NutritionService.UserNutrition.Common.Repository.IUserNutritionMongoRepository,NutritionService.DailyMenu.Common.IDailyMenuMongoRepository)">
            <summary>
            Handles the editing of user nutrition details.
            </summary>
            <param name="userNutritionRepository"></param>
            <param name="dailyMenuRepository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommandHandler.HandleAsync(NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the editing of user nutrition details based on the provided command.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.UserNutrition.GetUserNutritionDetails.GetUserNutritionDetailsQueryHandler">
            <summary>
            Handles the retrieval of user nutrition details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.GetUserNutritionDetails.GetUserNutritionDetailsQueryHandler.#ctor(NutritionService.UserNutrition.Common.Repository.IUserNutritionMongoRepository)">
            <summary>
            Handles the retrieval of user nutrition details by ID.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.GetUserNutritionDetails.GetUserNutritionDetailsQueryHandler.HandleAsync(NutritionService.UserNutrition.GetUserNutritionDetails.GetUserNutritionDetailsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of user nutrition details based on the provided query.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SharedKernel.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQueryHandler">
            <summary>
            ListUserNutritionsQueryHandler handles the query to list user nutrition records.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQueryHandler.#ctor(NutritionService.UserNutrition.Common.Repository.IUserNutritionMongoRepository)">
            <summary>
            ListUserNutritionsQueryHandler handles the query to list user nutrition records.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQueryHandler.HandleAsync(NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the retrieval of user nutrition records based on pagination parameters.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserNutrition.UserNutrition">
            <summary>
            Classe que representa a nutrição do usuário no banco de dados
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutrition.Id">
            <summary>
            Identificador do gerenciamento de nutrição
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutrition.CreatedBy">
            <summary>
            Identificador do perfil que criou o gerenciamento de nutrição
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutrition.NutritionManagerId">
            <summary>
            ID do responsável pelo gerenciamento da nutrição
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutrition.UserId">
            <summary>
            Identificador do perfil que utiliza a nutrição
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutrition.DailyMenus">
            <summary>
            Lista de cardápios diários do usuário
            </summary>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutrition.SetCreatedBy(System.String)">
            <summary>
            Método para definir o identificador do perfil que criou o gerenciamento de nutrição
            </summary>
            <param name="createdBy"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutrition.SetUserId(System.String)">
            <summary>
            Método para definir o identificador do perfil que vai utilizar a nutrição
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:NutritionService.UserNutrition.UserNutritionController">
            <summary>
            Controlar para gerenciar a nutrição do usuário.
            </summary>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionController.CreateUserNutrition(System.String,NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommand,NutritionService.Common.Interfaces.IHandler{NutritionService.UserNutrition.UserNutritionDto,NutritionService.UserNutrition.CreateUserNutrition.CreateUserNutritionCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por criar uma nutrição do usuário.
            </summary>
            <param name="userId"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionController.DeleteUserNutrition(System.String,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.UserNutrition.DeleteUserNutrition.DeleteUserNutritionCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por deletar uma nutrição do usuário.
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionController.EditUserNutrition(System.String,NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommand,NutritionService.Common.Interfaces.IHandler{System.Boolean,NutritionService.UserNutrition.EditUserNutrition.EditUserNutritionCommand},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por editar uma nutrição do usuário.
            </summary>
            <param name="id"></param>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionController.GetUserNutrition(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.UserNutrition.UserNutritionDto,NutritionService.UserNutrition.GetUserNutritionDetails.GetUserNutritionDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por obter os detalhes de uma nutrição do usuário.
            </summary>
            <param name="id"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionController.ListManagedUserNutritions(System.String,NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.UserNutrition.UserNutritionDto},NutritionService.UserNutrition.ListManagedUserNutritions.ListManagedUserNutritionsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota responsável por listar as nutrições do usuário.
            </summary>
            <param name="managerId"></param>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.UserNutrition.UserNutritionDto">
            <summary>
            DTO para representar a nutrição do usuário.
            </summary>
            <param name="userNutrition"></param>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionDto.#ctor(NutritionService.UserNutrition.UserNutrition)">
            <summary>
            DTO para representar a nutrição do usuário.
            </summary>
            <param name="userNutrition"></param>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutritionDto.Id">
            <summary>
            Identificador único da nutrição do usuário.
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutritionDto.CreatedBy">
            <summary>
            Identificador do usuário que criou a nutrição.
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutritionDto.NutritionManagerId">
            <summary>
            Identificador do gerente de nutrição associado ao usuário.
            </summary>
        </member>
        <member name="P:NutritionService.UserNutrition.UserNutritionDto.DailyMenus">
            <summary>
            Lista de menus diários do usuário.
            </summary>
        </member>
        <member name="T:NutritionService.UserNutrition.UserNutritionModule">
            <summary>
            Módulo para resolver as dependências relacionadas à nutrição do usuário.
            </summary>
        </member>
        <member name="M:NutritionService.UserNutrition.UserNutritionModule.ConfigureUserNutritionRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Método de extensão para configurar as dependências do módulo de nutrição do usuário.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
