<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NutritionService</name>
    </assembly>
    <members>
        <member name="T:NutritionService.Common.Interfaces.IHandler`2">
            <summary>
                Interface para padronizar handlers.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:NutritionService.Common.Interfaces.IHandler`2.HandleAsync(`1,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com operações.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Common.ProfileContext">
            <summary>
                Context para perfil logado
            </summary>
        </member>
        <member name="F:NutritionService.Common.ProfileContext._profileId">
            <summary>
                Id do perfil logado
            </summary>
        </member>
        <member name="P:NutritionService.Common.ProfileContext.ProfileId">
            <summary>
                Método para obter e definir o Id do perfil logado
            </summary>
        </member>
        <member name="T:NutritionService.Common.Utils.ClaimsPrincipalUtils">
            <summary>
                Classe utilitária para ClaimsPrincipal
            </summary>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetEmail(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o email do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetObjectId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o id do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetFirstName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o primeiro nome do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetLastName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o sobrenome do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetCity(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Método para obter a cidade do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetCountry(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Método para obter o país do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Common.Utils.ClaimsPrincipalUtils.GetState(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Método para obter o estado do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.Authentication">
            <summary>
                Classe responsavel por configurar a autenticacao
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.Authentication.ConfigureAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Metodo responsavel por configurar a autenticacao
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.EndpointsConfiguration">
            <summary>
                Configuração dos Endpoints
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.EndpointsConfiguration.MapEndpoints(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Mapeia os endpoint.
            </summary>
            <param name="app">The app.</param>
            <param name="configuration">The configuration.</param>
            <returns>An IEndpointRouteBuilder.</returns>
        </member>
        <member name="M:NutritionService.Configuration.EndpointsConfiguration.ConfigureEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configura os endpoints.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter">
            <summary>
                Filtro para substituir a versão pela versão exata no path
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:NutritionService.Configuration.Filters.VersionHeaderFilter">
            <summary>
                Filtro para remover o parâmetro de versão da documentação
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.Filters.VersionHeaderFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:NutritionService.Configuration.MiddlewareConfiguration">
            <summary>
                Classe para configuração de middlewares
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.MiddlewareConfiguration.ConfigureMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar os middlewares
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.ServiceDependencies">
            <summary>
                Classe para resolver as dependências de serviços
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.ServiceDependencies.SolveServiceDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para resolver as dependências de serviços
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Configuration.SwaggerConfiguration">
            <summary>
                Classe para configuração do Swagger
            </summary>
        </member>
        <member name="M:NutritionService.Configuration.SwaggerConfiguration.ConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar o Swagger
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Connections.ConnectionsModule">
            <summary>
                Modulo de conexões externas
            </summary>
        </member>
        <member name="M:NutritionService.Connections.ConnectionsModule.ConfigureConnections(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para configurar as conexões
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Exceptions.FoodAlreadyExistsException">
            <summary>
                Exceção para quando um alimento já existe
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.FoodAlreadyExistsException.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.FoodAlreadyExistsException.#ctor(System.String)">
            <summary>
                Construtor com mensagem
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NutritionService.Exceptions.NotFoundException">
            <summary>
                Exceção para quando um item não é encontrado
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.NotFoundException.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:NutritionService.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
                Construtor com mensagem
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NutritionService.Food.FoodController">
            <summary>
                Controller responsavel por gerenciar comidas
            </summary>
        </member>
        <member name="M:NutritionService.Food.FoodController.ListUnrevisedFoods(NutritionService.Food.ListNonRevisedFoods.ListUnrevisedFoodsQuery,NutritionService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{NutritionService.Food.Food},NutritionService.Food.ListNonRevisedFoods.ListUnrevisedFoodsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para listar comidas não revisadas
            </summary>
            <param name="query"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Food.FoodController.GetFoodDetails(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Food.Food,NutritionService.Food.GetFoodDetails.GetFoodDetailsQuery},System.Threading.CancellationToken)">
            <summary>
            Rota para pegar detalhes de uma comida
            </summary>
            <param name="barCode"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Food.FoodController.SendFriendRequest(NutritionService.Common.Interfaces.IHandler{NutritionService.Food.Food,NutritionService.Food.CreateFood.CreateFoodCommand},NutritionService.Food.CreateFood.CreateFoodCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para criar uma comida
            </summary>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Food.FoodController.EditFood(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Food.Food,NutritionService.Food.EditFood.EditFoodCommand},NutritionService.Food.EditFood.EditFoodCommand,System.Threading.CancellationToken)">
            <summary>
            Rota para editar uma comida
            </summary>
            <param name="barCode"></param>
            <param name="handler"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NutritionService.Food.FoodController.ApproveFood(System.String,NutritionService.Common.Interfaces.IHandler{NutritionService.Food.Food,NutritionService.Food.ApproveFood.ApproveFoodCommand},System.Threading.CancellationToken)">
            <summary>
            Rota para aprovar uma comida, e marcar como revisada
            </summary>
            <param name="barCode"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Food.FoodModule">
            <summary>
                Modulo para resolver as dependências relacionadas a comidas
            </summary>
        </member>
        <member name="M:NutritionService.Food.FoodModule.ConfigureFoodRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a comidas
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:NutritionService.Middleware.ExceptionMiddleware">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NutritionService.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{NutritionService.Middleware.ExceptionMiddleware})">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NutritionService.Middleware.ExceptionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                Método para invocar o middleware
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
