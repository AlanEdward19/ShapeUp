<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocialService</name>
    </assembly>
    <members>
        <member name="T:SocialService.ActivityFeed.ActivityFeedController">
            <summary>
                Controller responsavel por gerenciar funções relacionadas ao feed de atividades
            </summary>
        </member>
        <member name="M:SocialService.ActivityFeed.ActivityFeedController.BuildActivityFeed(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Post.PostDto},SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery},SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery,System.Threading.CancellationToken)">
            <summary>
                Rota para seguir um perfil
            </summary>
            <param name="handler"></param>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.ActivityFeed.ActivityFeedModule">
            <summary>
                Modulo para resolver as dependências relacionadas a feed de atividades
            </summary>
        </member>
        <member name="M:SocialService.ActivityFeed.ActivityFeedModule.ConfigureActivityFeedRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a feed de atividades
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.ActivityFeed.Common.Repository.ActivityFeedGraphGraphRepository">
            <summary>
                Repositório de feed de atividades.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.ActivityFeed.Common.Repository.ActivityFeedGraphGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositório de feed de atividades.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.ActivityFeed.Common.Repository.ActivityFeedGraphGraphRepository.BuildActivityFeed(SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery,System.Guid)">
            <summary>
                Método para construir o feed de atividades.
            </summary>
            <param name="query"></param>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.ActivityFeed.Common.Repository.IActivityFeedGraphRepository">
            <summary>
                Interface para o repositório de feed de atividades.
            </summary>
        </member>
        <member name="M:SocialService.ActivityFeed.Common.Repository.IActivityFeedGraphRepository.BuildActivityFeed(SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery,System.Guid)">
            <summary>
                Método para construir o feed de atividades.
            </summary>
            <param name="query"></param>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery">
            <summary>
                Query para obter o feed de atividades.
            </summary>
        </member>
        <member name="P:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery.Page">
            <summary>
                Página.
            </summary>
        </member>
        <member name="P:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery.Rows">
            <summary>
                Quantidade de registros por página.
            </summary>
        </member>
        <member name="T:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQueryHandler">
            <summary>
                Handler para obter o feed de atividades.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQueryHandler.#ctor(SocialService.ActivityFeed.Common.Repository.IActivityFeedGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para obter o feed de atividades.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQueryHandler.HandleAsync(SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter o feed de atividades.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQueryValidator">
            <summary>
                Validador para a query de obter o feed de atividades.
            </summary>
        </member>
        <member name="M:SocialService.ActivityFeed.GetActivityFeed.GetActivityFeedQueryValidator.#ctor">
            <summary>
                Validações para a query de obter o feed de atividades.
            </summary>
        </member>
        <member name="T:SocialService.Common.CommonModule">
            <summary>
               Módulo para configuração de dependências comuns.
            </summary>
        </member>
        <member name="M:SocialService.Common.CommonModule.ConfigureCommonRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Método para resolver as dependências comuns.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Common.Entities.GraphEntity">
            <summary>
                Entidade base para entidades do grafo.
            </summary>
        </member>
        <member name="P:SocialService.Common.Entities.GraphEntity.Id">
            <summary>
                Id da entidade
            </summary>
        </member>
        <member name="M:SocialService.Common.Entities.GraphEntity.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados do neo4j para a entidade
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:SocialService.Common.Events.NotificationEvent">
            <summary>
            Evento de notificação
            </summary>
        </member>
        <member name="P:SocialService.Common.Events.NotificationEvent.RecipientId">
            <summary>
            Id do destinatário da notificação
            </summary>
        </member>
        <member name="P:SocialService.Common.Events.NotificationEvent.Topic">
            <summary>
            Enum para tipos de notificações
            </summary>
        </member>
        <member name="P:SocialService.Common.Events.NotificationEvent.Content">
            <summary>
            Breve descrição da notificação
            </summary>
        </member>
        <member name="P:SocialService.Common.Events.NotificationEvent.Metadata">
            <summary>
            Dados adicionais relacionados à notificação
            </summary>
        </member>
        <member name="T:SocialService.Common.Interfaces.IHandler`2">
            <summary>
                Interface para padronizar handlers.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:SocialService.Common.Interfaces.IHandler`2.HandleAsync(`1,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com operações.
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Common.Models.ProfileBasicInformation">
            <summary>
                ViewModel para informações básicas de um perfil.
            </summary>
        </member>
        <member name="M:SocialService.Common.Models.ProfileBasicInformation.#ctor(System.String,System.String,System.Guid,System.String)">
            <summary>
                Construtor
            </summary>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="profileId"></param>
            <param name="imageUrl"></param>
        </member>
        <member name="P:SocialService.Common.Models.ProfileBasicInformation.FirstName">
            <summary>
                Primeiro nome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Common.Models.ProfileBasicInformation.LastName">
            <summary>
                Sobrenome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Common.Models.ProfileBasicInformation.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Common.Models.ProfileBasicInformation.ImageUrl">
            <summary>
            Url da imagem do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Common.ProfileContext">
            <summary>
                Context para perfil logado
            </summary>
        </member>
        <member name="F:SocialService.Common.ProfileContext._profileId">
            <summary>
                Id do perfil logado
            </summary>
        </member>
        <member name="P:SocialService.Common.ProfileContext.ProfileId">
            <summary>
                Método para obter e definir o Id do perfil logado
            </summary>
        </member>
        <member name="T:SocialService.Common.Utils.ClaimsPrincipalUtils">
            <summary>
                Classe utilitária para ClaimsPrincipal
            </summary>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetEmail(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o email do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetObjectId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o id do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetFirstName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o primeiro nome do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetLastName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o sobrenome do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetDisplayName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Método para obter o nome de exibição do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetCountry(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o país do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Common.Utils.ClaimsPrincipalUtils.GetPostalCode(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Método para obter o CEP do usuário
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Configuration.Authentication">
            <summary>
                Classe responsavel por configurar a autenticacao
            </summary>
        </member>
        <member name="M:SocialService.Configuration.Authentication.ConfigureAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Metodo responsavel por configurar a autenticacao
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Configuration.EndpointsConfiguration">
            <summary>
                Configuração dos Endpoints
            </summary>
        </member>
        <member name="M:SocialService.Configuration.EndpointsConfiguration.MapEndpoints(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Mapeia os endpoint.
            </summary>
            <param name="app">The app.</param>
            <param name="configuration">The configuration.</param>
            <returns>An IEndpointRouteBuilder.</returns>
        </member>
        <member name="M:SocialService.Configuration.EndpointsConfiguration.ConfigureEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configura os endpoints.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter">
            <summary>
                Filtro para substituir a versão pela versão exata no path
            </summary>
        </member>
        <member name="M:SocialService.Configuration.Filters.ReplaceVersionWithExactValueInPathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:SocialService.Configuration.Filters.VersionHeaderFilter">
            <summary>
                Filtro para remover o parâmetro de versão da documentação
            </summary>
        </member>
        <member name="M:SocialService.Configuration.Filters.VersionHeaderFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
                Método para aplicar o filtro
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:SocialService.Configuration.MiddlewareConfiguration">
            <summary>
                Classe para configuração de middlewares
            </summary>
        </member>
        <member name="M:SocialService.Configuration.MiddlewareConfiguration.ConfigureMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar os middlewares
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Configuration.ServiceDependencies">
            <summary>
                Classe para resolver as dependências de serviços
            </summary>
        </member>
        <member name="M:SocialService.Configuration.ServiceDependencies.SolveServiceDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para resolver as dependências de serviços
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Configuration.SwaggerConfiguration">
            <summary>
                Classe para configuração do Swagger
            </summary>
        </member>
        <member name="M:SocialService.Configuration.SwaggerConfiguration.ConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
                Método para configurar o Swagger
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Connections.ConnectionsModule">
            <summary>
                Modulo de conexões externas
            </summary>
        </member>
        <member name="M:SocialService.Connections.ConnectionsModule.ConfigureConnections(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Método para configurar as conexões
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Connections.Graph.GraphContext">
            <summary>
                Classe de contexto para conexão com o banco de dados de grafo
            </summary>
            <param name="neo4JDriver"></param>
        </member>
        <member name="M:SocialService.Connections.Graph.GraphContext.#ctor(Neo4j.Driver.IDriver)">
            <summary>
                Classe de contexto para conexão com o banco de dados de grafo
            </summary>
            <param name="neo4JDriver"></param>
        </member>
        <member name="M:SocialService.Connections.Graph.GraphContext.ExecuteQueryAsync(System.String)">
            <summary>
                Método para executar uma query no banco de dados de grafo
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Connections.Storage.BlobStorageProvider">
            <summary>
                Provedor de armazenamento de arquivos
            </summary>
            <param name="connectionString"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{SocialService.Connections.Storage.BlobStorageProvider})">
            <summary>
                Provedor de armazenamento de arquivos
            </summary>
            <param name="connectionString"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.GetProfilePicturesAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
                Método para obter fotos de perfil
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.ReadBlobAsync(System.String,System.String)">
            <summary>
                Método para ler o conteúdo de um blob
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.WriteBlobAsync(System.IO.MemoryStream,System.String,System.String)">
            <summary>
                Método para escrever o conteúdo em um blob
            </summary>
            <param name="data"></param>
            <param name="blobName"></param>
            <param name="containerName"></param>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.GenerateAuthenticatedUrl(System.String,System.String)">
            <summary>
            Método para gerar uma URL autenticada
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.CreateFolderAsync(System.String,System.String)">
            <summary>
                Método para criar uma pasta
            </summary>
            <param name="folderName"></param>
            <param name="containerName"></param>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.DeleteBlobAsync(System.String,System.String)">
            <summary>
                Método para deletar um blob
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.DeleteFolderAsync(System.String,System.String)">
            <summary>
                Método para deletar uma pasta
            </summary>
            <param name="folderName"></param>
            <param name="containerName"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.DeleteContainerAsync(System.String)">
            <summary>
                Método para deletar um container
            </summary>
            <param name="containerName"></param>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.SanitizeName(System.String,System.Boolean)">
            <summary>
                Método para sanitizar um nome
            </summary>
            <param name="name"></param>
            <param name="allowSlashes"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.BlobStorageProvider.RenameBlobAsync(System.String,System.String,System.String)">
            <summary>
                Método para renomear um blob
            </summary>
            <param name="oldBlobName"></param>
            <param name="newBlobName"></param>
            <param name="containerName"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SocialService.Connections.Storage.IBlobStorageProvider">
            <summary>
                Interface para prover armazenamento de arquivos
            </summary>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.GetProfilePicturesAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
                Método para obter fotos de perfil
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.ReadBlobAsync(System.String,System.String)">
            <summary>
                Método para ler um blob
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.WriteBlobAsync(System.IO.MemoryStream,System.String,System.String)">
            <summary>
                Método para escrever um blob
            </summary>
            <param name="data"></param>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.GenerateAuthenticatedUrl(System.String,System.String)">
            <summary>
            Método para gerar uma URL autenticada
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.CreateFolderAsync(System.String,System.String)">
            <summary>
                Método para criar uma pasta
            </summary>
            <param name="folderName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.DeleteBlobAsync(System.String,System.String)">
            <summary>
                Método para deletar um blob
            </summary>
            <param name="blobName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.DeleteContainerAsync(System.String)">
            <summary>
                Método para deletar um container
            </summary>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.DeleteFolderAsync(System.String,System.String)">
            <summary>
                Método para deletar uma pasta
            </summary>
            <param name="folderName"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Connections.Storage.IBlobStorageProvider.SanitizeName(System.String,System.Boolean)">
            <summary>
                Método para sanitizar um nome
            </summary>
            <param name="name"></param>
            <param name="allowSlashes"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Exceptions.NotFoundException">
            <summary>
                Exceção para quando um item não é encontrado
            </summary>
        </member>
        <member name="M:SocialService.Exceptions.NotFoundException.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:SocialService.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
                Construtor com mensagem
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SocialService.Follow.Common.Repository.FollowerGraphRepository">
            <summary>
                Repositório de grafo sobre seguidores.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.FollowerGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositório de grafo sobre seguidores.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.FollowerGraphRepository.FollowAsync(System.Guid,System.Guid)">
            <summary>
                Método para seguir um perfil: cria uma aresta de "FOLLOWING" entre os perfis
            </summary>
            <param name="followerProfileId"></param>
            <param name="followedProfileId"></param>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.FollowerGraphRepository.UnfollowAsync(System.Guid,System.Guid)">
            <summary>
                Método para deixar de seguir um perfil: deleta a aresta de "FOLLOWING" entre os perfis
            </summary>
            <param name="followerProfileId"></param>
            <param name="followedProfileId"></param>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.FollowerGraphRepository.GetFollowersAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil segue outro: retorna a lista de ids de perfil que o perfil dado segue
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.FollowerGraphRepository.GetFollowingAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil é seguido por outro: retorna a lista de ids de perfil que seguem o perfil dado
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.Common.Repository.IFollowerGraphRepository">
            <summary>
                Interface do repositório de grafo sobre seguidores.
            </summary>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.IFollowerGraphRepository.FollowAsync(System.Guid,System.Guid)">
            <summary>
                Método para seguir um perfil: cria uma aresta de "FOLLOWING" entre os perfis
            </summary>
            <param name="followerProfileId"></param>
            <param name="followedProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.IFollowerGraphRepository.UnfollowAsync(System.Guid,System.Guid)">
            <summary>
                Método para deixar de seguir um perfil: deleta a aresta de "FOLLOWING" entre os perfis
            </summary>
            <param name="followerProfileId"></param>
            <param name="followedProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.IFollowerGraphRepository.GetFollowersAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil segue outro: retorna a lista de ids de perfil que o perfil dado segue
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.Common.Repository.IFollowerGraphRepository.GetFollowingAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil é seguido por outro: retorna a lista de ids de perfil que seguem o perfil dado
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.FollowController">
            <summary>
                Controller responsavel por gerenciar funções de seguir e deixar de seguir de um perfil
            </summary>
        </member>
        <member name="M:SocialService.Follow.FollowController.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Controller responsavel por gerenciar funções de seguir e deixar de seguir de um perfil
            </summary>
        </member>
        <member name="M:SocialService.Follow.FollowController.FollowUser(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Follow.FollowUser.FollowUserCommand},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para seguir um perfil
            </summary>
            <param name="handler"></param>
            <param name="profileId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.FollowController.UnfollowUser(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Follow.UnfollowUser.UnfollowUserCommand},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rotar para deixar de seguir um perfil
            </summary>
            <param name="handler"></param>
            <param name="profileId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.FollowController.GetFollowers(System.Guid,System.Int32,System.Int32,SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Common.Models.ProfileBasicInformation},SocialService.Follow.GetFollowers.GetFollowersQuery},System.Threading.CancellationToken)">
            <summary>
                Rotar para obter os seguidores de um perfil
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Follow.FollowController.GetFollowing(System.Guid,System.Int32,System.Int32,SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Common.Models.ProfileBasicInformation},SocialService.Follow.GetFollowing.GetFollowingQuery},System.Threading.CancellationToken)">
            <summary>
                Rotar para obter os perfis que um perfil segue
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.FollowModule">
            <summary>
                Modulo para resolver as dependências relacionadas a seguidores
            </summary>
        </member>
        <member name="M:SocialService.Follow.FollowModule.ConfigureFollowRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a seguidores
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.FollowUser.FollowUserCommand">
            <summary>
                Comando para seguir um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.FollowUser.FollowUserCommand.#ctor(System.Guid)">
            <summary>
                Construtor do comando.
            </summary>
            <param name="followedUserId"></param>
        </member>
        <member name="P:SocialService.Follow.FollowUser.FollowUserCommand.FollowedUserId">
            <summary>
                Id do usuário a ser seguido.
            </summary>
        </member>
        <member name="T:SocialService.Follow.FollowUser.FollowUserCommandHandler">
            <summary>
                Handler para seguir um usuário.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.FollowUser.FollowUserCommandHandler.#ctor(SocialService.Follow.Common.Repository.IFollowerGraphRepository,SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.INotificationPublisher)">
            <summary>
                Handler para seguir um usuário.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.FollowUser.FollowUserCommandHandler.HandleAsync(SocialService.Follow.FollowUser.FollowUserCommand,System.Threading.CancellationToken)">
            <summary>
                Método para seguir um usuário.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.FollowUser.FollowUserCommandValidator">
            <summary>
                Validador para o comando de seguir um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.FollowUser.FollowUserCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para o comando de seguir um usuário.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Follow.GetFollowers.GetFollowersQuery">
            <summary>
                Query para obter o perfil dos seguidores de um perfil.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowers.GetFollowersQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowers.GetFollowersQuery.Page">
            <summary>
                Página.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowers.GetFollowersQuery.Rows">
            <summary>
                Quantidade de registros por página.
            </summary>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQuery.SetProfileId(System.Guid)">
            <summary>
                Método para setar o Id do perfil.
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQuery.SetPage(System.Int32)">
            <summary>
                Método para setar a página.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQuery.SetRows(System.Int32)">
            <summary>
                Método para setar a quantidade de registros por página.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="T:SocialService.Follow.GetFollowers.GetFollowersQueryHandler">
            <summary>
                Handler para obter os seguidores de um perfil.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Follow.Common.Repository.IFollowerGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para obter os seguidores de um perfil.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQueryHandler.HandleAsync(SocialService.Follow.GetFollowers.GetFollowersQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter os seguidores de um perfil.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.GetFollowers.GetFollowersQueryValidator">
            <summary>
                Validador para a query de obter os seguidores de um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.GetFollowers.GetFollowersQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de obter os seguidores de um usuário.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Follow.GetFollowing.GetFollowingQuery">
            <summary>
                Query para obter os perfis que um perfil está seguindo.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowing.GetFollowingQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowing.GetFollowingQuery.Page">
            <summary>
                Página.
            </summary>
        </member>
        <member name="P:SocialService.Follow.GetFollowing.GetFollowingQuery.Rows">
            <summary>
                Quantidade de registros por página.
            </summary>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQuery.SetProfileId(System.Guid)">
            <summary>
                Método para setar o Id do perfil.
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQuery.SetPage(System.Int32)">
            <summary>
                Método para setar a página.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQuery.SetRows(System.Int32)">
            <summary>
                Método para setar a quantidade de registros por página.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="T:SocialService.Follow.GetFollowing.GetFollowingQueryHandler">
            <summary>
                Handler para obter os perfis seguidos de um perfil
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Follow.Common.Repository.IFollowerGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para obter os perfis seguidos de um perfil
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQueryHandler.HandleAsync(SocialService.Follow.GetFollowing.GetFollowingQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter os perfis seguidos de um perfil
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.GetFollowing.GetFollowingQueryValidator">
            <summary>
                Validador para a query de obter os seguidores de um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.GetFollowing.GetFollowingQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de obter os seguidores de um usuário.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Follow.UnfollowUser.UnfollowUserCommand">
            <summary>
                Comando para deixar de seguir um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.UnfollowUser.UnfollowUserCommand.#ctor(System.Guid)">
            <summary>
                Construtor do comando.
            </summary>
            <param name="unfollowedUserId"></param>
        </member>
        <member name="P:SocialService.Follow.UnfollowUser.UnfollowUserCommand.UnfollowedUserId">
            <summary>
                Id do usuário que será deixado de seguir.
            </summary>
        </member>
        <member name="T:SocialService.Follow.UnfollowUser.UnfollowUserCommandHandler">
            <summary>
                Handler para o comando de unfollow de um usuário.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.UnfollowUser.UnfollowUserCommandHandler.#ctor(SocialService.Follow.Common.Repository.IFollowerGraphRepository)">
            <summary>
                Handler para o comando de unfollow de um usuário.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Follow.UnfollowUser.UnfollowUserCommandHandler.HandleAsync(SocialService.Follow.UnfollowUser.UnfollowUserCommand,System.Threading.CancellationToken)">
            <summary>
                Método para realizar o unfollow de um usuário.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Follow.UnfollowUser.UnfollowUserCommandValidator">
            <summary>
                Validador para o comando de parar de seguir um usuário.
            </summary>
        </member>
        <member name="M:SocialService.Follow.UnfollowUser.UnfollowUserCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para o comando de parar de seguir um usuário.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.Common.Enums.EFriendStatus">
            <summary>
                Status de um pedido de amizade.
            </summary>
        </member>
        <member name="F:SocialService.Friends.Common.Enums.EFriendStatus.Pending">
            <summary>
                Status de amizade pendente.
            </summary>
        </member>
        <member name="F:SocialService.Friends.Common.Enums.EFriendStatus.PendingResponse">
            <summary>
                Status de amizade esperando resposta.
            </summary>
        </member>
        <member name="T:SocialService.Friends.Common.Repository.FriendshipGraphRepository">
            <summary>
                Repositório de grafo sobre amizades.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositório de grafo sobre amizades.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.SendFriendRequestAsync(System.Guid,System.Guid,System.String)">
            <summary>
                Método para enviar um pedido de amizade
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <param name="message"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.FriendRequestExistsAsync(System.Guid,System.Guid)">
            <summary>
                Método para verificar se um pedido de amizade existe
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.AcceptFriendRequestAsync(System.Guid,System.Guid)">
            <summary>
                Método para aceitar um pedido de amizade
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.RejectFriendRequestAsync(System.Guid,System.Guid)">
            <summary>
                Método para rejeitar um pedido de amizade
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.GetPendingRequestsForProfileAsync(System.Guid)">
            <summary>
                Método para obter os pedidos de amizade pendentes para um perfil
            </summary>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.GetSentFriendRequestsAsync(System.Guid)">
            <summary>
                Método para obter os pedidos de amizade enviados por um perfil
            </summary>
            <param name="senderProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.GetFriendshipsForProfileAsync(System.Guid)">
            <summary>
                Método para obter as amizades de um perfil
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.FriendshipGraphRepository.UnfriendAsync(System.Guid,System.Guid)">
            <summary>
                Método para desfazer uma amizade
            </summary>
            <param name="profileAId"></param>
            <param name="profileBId"></param>
        </member>
        <member name="T:SocialService.Friends.Common.Repository.IFriendshipGraphRepository">
            <summary>
                Interface para o repositório de grafo de amizades.
            </summary>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.SendFriendRequestAsync(System.Guid,System.Guid,System.String)">
            <summary>
                Método para enviar uma solicitação de amizade.
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.FriendRequestExistsAsync(System.Guid,System.Guid)">
            <summary>
                Método para verificar se um pedido de amizade existe
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.AcceptFriendRequestAsync(System.Guid,System.Guid)">
            <summary>
                Método para aceitar uma solicitação de amizade.
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.RejectFriendRequestAsync(System.Guid,System.Guid)">
            <summary>
                Método para rejeitar uma solicitação de amizade.
            </summary>
            <param name="senderProfileId"></param>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.GetPendingRequestsForProfileAsync(System.Guid)">
            <summary>
                Método para obter as solicitações pendentes de amizade.
            </summary>
            <param name="receiverProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.GetSentFriendRequestsAsync(System.Guid)">
            <summary>
                Método para obter as solicitações de amizade enviadas.
            </summary>
            <param name="senderProfileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.GetFriendshipsForProfileAsync(System.Guid)">
            <summary>
                Método para obter as amizades de um perfil.
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.Common.Repository.IFriendshipGraphRepository.UnfriendAsync(System.Guid,System.Guid)">
            <summary>
                Método para desfazer uma amizade.
            </summary>
            <param name="profileAId"></param>
            <param name="profileBId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendController">
            <summary>
                Controller responsavel por gerenciar o perfil do usuario
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendController.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Controller responsavel por gerenciar o perfil do usuario
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendController.SendFriendRequest(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand},SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para enviar uma solicitação de amigo
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.FriendController.CheckRequestStatus(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel},SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQuery},System.Threading.CancellationToken)">
            <summary>
                Rota para verificar o status de uma solicitação de amizade
            </summary>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.FriendController.ViewProfile(System.Guid,System.Int32,System.Int32,SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Common.Models.ProfileBasicInformation},SocialService.Friends.Friendship.ListFriends.ListFriendsQuery},System.Threading.CancellationToken)">
            <summary>
                Rota para listar os amigos de um perfil
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.FriendController.ManageFriendRequests(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand},SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para gerenciar solicitações de amizade
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.FriendController.RemoveFriend(System.Guid,SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommand},System.Threading.CancellationToken)">
            <summary>
                Rota para remover um amigo
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Friends.FriendController.RemoveFriendRequest(System.Guid,SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommand},System.Threading.CancellationToken)">
            <summary>
                Rota para remover uma solicitação de amizade
            </summary>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQuery">
            <summary>
                Query para verificar o status solicitações de amizade.
            </summary>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQueryHandler">
            <summary>
                Handler para verificar o status das solicitações de amizade.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Handler para verificar o status das solicitações de amizade.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQueryHandler.HandleAsync(SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusQuery,System.Threading.CancellationToken)">
            <summary>
                Método para verificar o status das solicitações de amizade.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel">
            <summary>
                ViewModel para a verificação do status de uma solicitação de amizade.
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel.#ctor(System.String,System.String,SocialService.Friends.Common.Enums.EFriendStatus,System.Guid)">
            <summary>
                Construtor.
            </summary>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="status"></param>
            <param name="profileId"></param>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel.FirstName">
            <summary>
                Primeiro nome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel.LastName">
            <summary>
                Sobrenome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel.Status">
            <summary>
                Status da solicitação de amizade.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.CheckFriendRequestStatus.CheckFriendRequestStatusViewModel.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.FriendRequest">
            <summary>
                Classe que representa uma solicitação de amizade
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.FriendRequest.SenderProfileId">
            <summary>
                Perfil que enviou a solicitação
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.FriendRequest.ReceiverProfileId">
            <summary>
                Perfil que recebeu a solicitação
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.FriendRequest.Message">
            <summary>
                Mensagem enviada com a solicitação
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.FriendRequest.CreatedAt">
            <summary>
                Data de criação da solicitação
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.FriendRequest.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados da solicitação de amizade de um dicionário
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand">
            <summary>
                Comando para gerenciar solicitações de amizade.
            </summary>
            <param name="accept"></param>
            <param name="profileId"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand.#ctor(System.Boolean,System.Guid)">
            <summary>
                Comando para gerenciar solicitações de amizade.
            </summary>
            <param name="accept"></param>
            <param name="profileId"></param>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand.Accept">
            <summary>
                Aceitar ou recusar a solicitação.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommandHandler">
            <summary>
                Handler para gerenciar solicitações de amizade.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommandHandler.#ctor(SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Handler para gerenciar solicitações de amizade.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommandHandler.HandleAsync(SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommand,System.Threading.CancellationToken)">
            <summary>
                Método para gerenciar solicitações de amizade.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommandValidator">
            <summary>
                Validador para o comando de gerenciar solicitações de amizade.
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.ManageFriendRequests.ManageFriendRequestsCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Validações para o comando de gerenciar solicitações de amizade.
            </summary>
            <param name="profileGraphRepository"></param>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommand">
            <summary>
                Comando para remover uma solicitação de amizade.
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommand.#ctor(System.Guid)">
            <summary>
                Construtor.
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommand.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommandHandler">
            <summary>
                Handler para remover um pedido de amizade
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommandHandler.#ctor(SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Handler para remover um pedido de amizade
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommandHandler.HandleAsync(SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommand,System.Threading.CancellationToken)">
            <summary>
                Método para remover um pedido de amizade
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommandValidator">
            <summary>
                Validador para o comando de remover solicitação de amizade.
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.RemoveFriendRequest.RemoveFriendRequestCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Validações para o comando de remover solicitação de amizade..
            </summary>
            <param name="profileGraphRepository"></param>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand">
            <summary>
                Comando para adicionar um amigo.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand.FriendId">
            <summary>
                Id do amigo.
            </summary>
        </member>
        <member name="P:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand.RequestMessage">
            <summary>
                Mensagem de solicitação.
            </summary>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommandHandler">
            <summary>
                Handler para adicionar um amigo.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommandHandler.#ctor(SocialService.Friends.Common.Repository.IFriendshipGraphRepository,SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.INotificationPublisher)">
            <summary>
                Handler para adicionar um amigo.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommandHandler.HandleAsync(SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommand,System.Threading.CancellationToken)">
            <summary>
                Método para adicionar um amigo.
            </summary>
            <param name="requestCommand"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommandValidator">
            <summary>
                Validador para o comando de enviar solicitação de amizade.
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendRequest.SendFriendRequest.SendFriendRequestCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para o comando de enviar solicitação de amizade.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.Friendship.Friendship">
            <summary>
                Classe que representa uma amizade entre dois perfis
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.Friendship.#ctor(System.Guid,System.Guid)">
            <summary>
                Construtor padrão
            </summary>
            <param name="profileAId"></param>
            <param name="profileBId"></param>
        </member>
        <member name="P:SocialService.Friends.Friendship.Friendship.ProfileAId">
            <summary>
                Id do perfil A
            </summary>
        </member>
        <member name="P:SocialService.Friends.Friendship.Friendship.ProfileBId">
            <summary>
                Id do perfil B
            </summary>
        </member>
        <member name="P:SocialService.Friends.Friendship.Friendship.CreatedAt">
            <summary>
                Data de criação da amizade
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.Friendship.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para setar as informações da amizade
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery">
            <summary>
                Query para listar amigos de um perfil.
            </summary>
        </member>
        <member name="P:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.Page">
            <summary>
                Página atual.
            </summary>
        </member>
        <member name="P:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.Rows">
            <summary>
                Quantidade de registros por página.
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.SetProfileId(System.Guid)">
            <summary>
                Método para setar o Id do perfil.
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.SetPage(System.Int32)">
            <summary>
                Método para setar a página atual.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQuery.SetRows(System.Int32)">
            <summary>
                Método para setar a quantidade de registros por página.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="T:SocialService.Friends.Friendship.ListFriends.ListFriendsQueryHandler">
            <summary>
                Handler para a query de listagem de amigos.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Friends.Common.Repository.IFriendshipGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de listagem de amigos.
            </summary>
            <param name="context"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQueryHandler.HandleAsync(SocialService.Friends.Friendship.ListFriends.ListFriendsQuery,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com a query de listagem de amigos.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.Friendship.ListFriends.ListFriendsQueryValidator">
            <summary>
                Validador para a query de listar amigos de um perfil.
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.ListFriends.ListFriendsQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de listar amigos de um perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommand">
            <summary>
                Comando para remover um amigo.
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommand.#ctor(System.Guid)">
            <summary>
                Construtor.
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="P:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommand.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommandHandler">
            <summary>
                Handler para remover um amigo.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommandHandler.#ctor(SocialService.Friends.Common.Repository.IFriendshipGraphRepository)">
            <summary>
                Handler para remover um amigo.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommandHandler.HandleAsync(SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommand,System.Threading.CancellationToken)">
            <summary>
                Método para remover um amigo.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommandValidator">
            <summary>
                Validador para o comando de remover um amigo.
            </summary>
        </member>
        <member name="M:SocialService.Friends.Friendship.RemoveFriend.RemoveFriendCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para o comando de remover um amigo.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Friends.FriendsModule">
            <summary>
                Modulo para resolver as dependências relacionadas a amizades
            </summary>
        </member>
        <member name="M:SocialService.Friends.FriendsModule.ConfigureFriendsRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a amizades
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Middleware.ExceptionMiddleware">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SocialService.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{SocialService.Middleware.ExceptionMiddleware})">
            <summary>
                Middleware para tratamento de exceções
            </summary>
            <param name="next"></param>
            <param name="logger"></param>
        </member>
        <member name="M:SocialService.Middleware.ExceptionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                Método para invocar o middleware
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:SocialService.Post.Comment.Comment">
            <summary>
                Classe que representa um comentário
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.Comment.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.Comment.#ctor(SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand,System.Guid)">
            <summary>
                Construtor para criar um novo comentário.
            </summary>
            <param name="command"></param>
            <param name="profileId"></param>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.ProfileId">
            <summary>
                Id do perfil que fez o comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.ProfileFirstName">
            <summary>
            Primeiro nome do perfil que fez o comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.ProfileLastName">
            <summary>
            Sobrenome do perfil que fez o comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.ProfileImageUrl">
            <summary>
            Url da imagem do perfil que fez o comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.CreatedAt">
            <summary>
                Data de criação do comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.Comment.Content">
            <summary>
                Conteúdo do comentário
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.Comment.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados do neo4j para a entidade
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SocialService.Post.Comment.Comment.UpdateContent(System.String)">
            <summary>
                Método para atualizar o conteúdo do comentário.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:SocialService.Post.Comment.Comment.SetProfileImageUrl(System.String)">
            <summary>
            Método para setar a url da imagem do perfil.
            </summary>
            <param name="profileImageUrl"></param>
        </member>
        <member name="T:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand">
            <summary>
                Comando para comentar em um post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand.Content">
            <summary>
                Conteúdo do comentário
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommandHandler">
            <summary>
                Handler para comentar em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.INotificationPublisher)">
            <summary>
                Handler para comentar em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommandHandler.HandleAsync(SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para comentar em um post
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommandValidator">
            <summary>
                Validador para o comando de comentar em um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.CommentOnPost.CommentOnPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de comentar em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommand">
            <summary>
                Comando para deletar um comentário em um post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommand.CommentId">
            <summary>
                Id do comentário
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommand.SetCommentId(System.Guid)">
            <summary>
                Método para setar o id do comentário
            </summary>
            <param name="commentId"></param>
        </member>
        <member name="T:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommandHandler">
            <summary>
                Handler para deletar um comentário em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Handler para deletar um comentário em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommandHandler.HandleAsync(SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para deletar um comentário em um post
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommandValidator">
            <summary>
                Validador para o comando de deletar um comentário em um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de deletar um comentário em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand">
            <summary>
                Comando para editar um comentário em um post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand.CommentId">
            <summary>
                Id do comentário
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand.Content">
            <summary>
                Conteúdo do comentário
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand.SetCommentId(System.Guid)">
            <summary>
                Método para setar o id do comentário
            </summary>
            <param name="commentId"></param>
        </member>
        <member name="T:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommandHandler">
            <summary>
                Handler para editar um comentário em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Handler para editar um comentário em um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommandHandler.HandleAsync(SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para editar um comentário em um post
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommandValidator">
            <summary>
                Validador para o comando de editar um comentário em um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de editar um comentário em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.Comment.GetPostComments.GetPostCommentsQuery">
            <summary>
                Query para obter os comentários de um post
            </summary>
        </member>
        <member name="P:SocialService.Post.Comment.GetPostComments.GetPostCommentsQuery.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.GetPostComments.GetPostCommentsQuery.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.Comment.GetPostComments.GetPostCommentsQueryHandler">
            <summary>
                Handler para obter os comentários de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.GetPostComments.GetPostCommentsQueryHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para obter os comentários de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.Comment.GetPostComments.GetPostCommentsQueryHandler.HandleAsync(SocialService.Post.Comment.GetPostComments.GetPostCommentsQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter os comentários de um post
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.Comment.GetPostComments.GetPostCommentsQueryValidator">
            <summary>
                Validador para a query de obter os comentários de um post
            </summary>
        </member>
        <member name="M:SocialService.Post.Comment.GetPostComments.GetPostCommentsQueryValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para a query de obter os comentários de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.Common.Enums.EPostVisibility">
            <summary>
                Enum para visibilidade de post
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EPostVisibility.Public">
            <summary>
                Visibilidade pública
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EPostVisibility.FriendsOnly">
            <summary>
                Visibilidade somente para amigos
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EPostVisibility.Private">
            <summary>
                Visibilidade privada
            </summary>
        </member>
        <member name="T:SocialService.Post.Common.Enums.EReactionType">
            <summary>
                Enum para os tipos de reações
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Like">
            <summary>
                Reação de like
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Dislike">
            <summary>
                Reação de dislike
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Love">
            <summary>
                Reação de amor
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Haha">
            <summary>
                Reação de risada
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Wow">
            <summary>
                Reação de surpresa
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Sad">
            <summary>
                Reação de tristeza
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Angry">
            <summary>
                Reação de raiva
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Care">
            <summary>
                Reação de cuidado
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Support">
            <summary>
                Reação de apoio
            </summary>
        </member>
        <member name="F:SocialService.Post.Common.Enums.EReactionType.Celebrate">
            <summary>
                Reação de celebração
            </summary>
        </member>
        <member name="T:SocialService.Post.Common.Repository.IPostGraphRepository">
            <summary>
                Interface do repositório de grafo para post
            </summary>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetProfileIdByPostIdAsync(System.Guid)">
            <summary>
            Método que retorna o id do perfil de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetPostAsync(System.Guid)">
            <summary>
                Método que retorna um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetPostsByProfileIdAsync(System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            Método que retorna os posts de um perfil
            </summary>
            <param name="profileId"></param>
            <param name="requesterId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.PostExistsAsync(System.Guid)">
            <summary>
                Método que verifica se um post existe
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.CreatePostAsync(System.Guid,SocialService.Post.Post)">
            <summary>
                Método que cria um post
            </summary>
            <param name="profileId"></param>
            <param name="postId"></param>
            <param name="post"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.UpdatePostAsync(SocialService.Post.Post)">
            <summary>
                Método que atualiza um post
            </summary>
            <param name="post"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.UploadPostImagesAsync(System.Guid,System.Collections.Generic.List{System.String})">
            <summary>
                Método que adiciona imagens a um post
            </summary>
            <param name="postId"></param>
            <param name="images"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.DeletePostAsync(System.Guid)">
            <summary>
                Método que deleta um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.CommentOnPostAsync(SocialService.Post.Comment.Comment)">
            <summary>
                Método que comenta em um post
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetPostCommentsByCommentIdAsync(System.Guid)">
            <summary>
                Método que retorna os comentários de um post
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetPostCommentsByPostIdAsync(System.Guid)">
            <summary>
                Método que retorna os comentários de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.EditCommentOnPostAsync(SocialService.Post.Comment.Comment)">
            <summary>
                Método que edita um comentário
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.DeleteCommentOnPostAsync(System.Guid)">
            <summary>
                Método que deleta um comentário
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.CommentExistsAsync(System.Guid)">
            <summary>
                Método que verifica se um comentário existe
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.ReactToPostAsync(SocialService.Post.React.Reaction)">
            <summary>
                Método que adiciona uma reação a um post
            </summary>
            <param name="reaction"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.GetReactionsOnPostAsync(System.Guid)">
            <summary>
                Método que retorna as reações de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.IPostGraphRepository.DeleteReactionOnPostAsync(System.Guid,System.Guid)">
            <summary>
                Método que deleta uma reação em um post
            </summary>
            <param name="postId"></param>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.Common.Repository.PostGraphRepository">
            <summary>
                Repositorio de grafo para post
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositorio de grafo para post
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetProfileIdByPostIdAsync(System.Guid)">
            <summary>
            Método que retorna o id do perfil de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetPostAsync(System.Guid)">
            <summary>
                Método que retorna um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetPostsByProfileIdAsync(System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            Método que retorna os posts de um perfil
            </summary>
            <param name="profileId"></param>
            <param name="requesterId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.PostExistsAsync(System.Guid)">
            <summary>
                Método que verifica se um post existe
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.CreatePostAsync(System.Guid,SocialService.Post.Post)">
            <summary>
                Método que cria um post
            </summary>
            <param name="profileId"></param>
            <param name="post"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.UpdatePostAsync(SocialService.Post.Post)">
            <summary>
                Método que atualiza um post
            </summary>
            <param name="post"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.UploadPostImagesAsync(System.Guid,System.Collections.Generic.List{System.String})">
            <summary>
                Método que adiciona imagens a um post
            </summary>
            <param name="postId"></param>
            <param name="images"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.DeletePostAsync(System.Guid)">
            <summary>
                Método que deleta um post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.CommentOnPostAsync(SocialService.Post.Comment.Comment)">
            <summary>
                Método que comenta em um post
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetPostCommentsByCommentIdAsync(System.Guid)">
            <summary>
                Método que retorna um comentário de um post
            </summary>
            <param name="commentId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetPostCommentsByPostIdAsync(System.Guid)">
            <summary>
                Método que retorna os comentários de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.EditCommentOnPostAsync(SocialService.Post.Comment.Comment)">
            <summary>
                Método que edita um comentário
            </summary>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.DeleteCommentOnPostAsync(System.Guid)">
            <summary>
                Método que deleta um comentário
            </summary>
            <param name="commentId"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.CommentExistsAsync(System.Guid)">
            <summary>
                Método que verifica se um comentário existe
            </summary>
            <param name="commentId"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.ReactToPostAsync(SocialService.Post.React.Reaction)">
            <summary>
                Método que cria/atualiza se ja existir uma reação em um post
            </summary>
            <param name="reaction"></param>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.GetReactionsOnPostAsync(System.Guid)">
            <summary>
                Método que retorna as reações de um post
            </summary>
            <param name="postId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.Common.Repository.PostGraphRepository.DeleteReactionOnPostAsync(System.Guid,System.Guid)">
            <summary>
                Método que deleta uma reação em um post
            </summary>
            <param name="postId"></param>
            <param name="profileId"></param>
        </member>
        <member name="T:SocialService.Post.CreatePost.CreatePostCommand">
            <summary>
                Comando para criação de post.
            </summary>
        </member>
        <member name="P:SocialService.Post.CreatePost.CreatePostCommand.Content">
            <summary>
                Conteúdo do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.CreatePost.CreatePostCommand.Visibility">
            <summary>
                Visibilidade do post.
            </summary>
        </member>
        <member name="T:SocialService.Post.CreatePost.CreatePostCommandHandler">
            <summary>
                Handler para criação de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.CreatePost.CreatePostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para criação de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.CreatePost.CreatePostCommandHandler.HandleAsync(SocialService.Post.CreatePost.CreatePostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para criação de post.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.CreatePost.CreatePostCommandValidator">
            <summary>
                Validador para o comando de criação de post.
            </summary>
        </member>
        <member name="M:SocialService.Post.CreatePost.CreatePostCommandValidator.#ctor">
            <summary>
                Validações para o comando de criação de post.
            </summary>
        </member>
        <member name="T:SocialService.Post.DeletePost.DeletePostCommand">
            <summary>
                Comando para deletar um post
            </summary>
        </member>
        <member name="P:SocialService.Post.DeletePost.DeletePostCommand.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="M:SocialService.Post.DeletePost.DeletePostCommand.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.DeletePost.DeletePostCommandHandler">
            <summary>
                Handler para o comando de deletar um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.DeletePost.DeletePostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para o comando de deletar um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.DeletePost.DeletePostCommandHandler.HandleAsync(SocialService.Post.DeletePost.DeletePostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de deletar um post.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.DeletePost.DeletePostCommandValidator">
            <summary>
                Validador para o comando de deletar um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.DeletePost.DeletePostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de deletar um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.EditPost.EditPostCommand">
            <summary>
                Comando para criação de post.
            </summary>
        </member>
        <member name="P:SocialService.Post.EditPost.EditPostCommand.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="P:SocialService.Post.EditPost.EditPostCommand.Content">
            <summary>
                Conteúdo do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.EditPost.EditPostCommand.Visibility">
            <summary>
                Visibilidade do post.
            </summary>
        </member>
        <member name="M:SocialService.Post.EditPost.EditPostCommand.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.EditPost.EditPostCommandHandler">
            <summary>
                Handler para criação de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.EditPost.EditPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Handler para criação de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.EditPost.EditPostCommandHandler.HandleAsync(SocialService.Post.EditPost.EditPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para criação de post.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.EditPost.EditPostCommandValidator">
            <summary>
                Validador para o comando de edição de post.
            </summary>
        </member>
        <member name="M:SocialService.Post.EditPost.EditPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de edição de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery">
            <summary>
            Query para obter os posts de um perfil
            </summary>
        </member>
        <member name="P:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery.ProfileId">
            <summary>
            Id do perfil
            </summary>
        </member>
        <member name="P:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery.Page">
            <summary>
            Número da página
            </summary>
        </member>
        <member name="P:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery.Rows">
            <summary>
            Quantidade de linhas
            </summary>
        </member>
        <member name="M:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery.#ctor(System.Int32,System.Int32)">
            <summary>
            Construtor da query de busca de post
            </summary>
            <param name="page"></param>
            <param name="rows"></param>
        </member>
        <member name="M:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery.SetProfileId(System.Guid)">
            <summary>
            Método para setar o id do perfil
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="T:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQueryHandler">
            <summary>
                Handler para a query de obter posts pelo id do perfil
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQueryHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de obter posts pelo id do perfil
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQueryHandler.HandleAsync(SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter os posts de um perfil
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQueryValidator">
            <summary>
                Validador para a query de busca de post.
            </summary>
        </member>
        <member name="M:SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de busca de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.GetPost.GetPostQuery">
            <summary>
                Query para buscar um post
            </summary>
        </member>
        <member name="P:SocialService.Post.GetPost.GetPostQuery.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="M:SocialService.Post.GetPost.GetPostQuery.SetPostId(System.Guid)">
            <summary>
                Método para set o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.GetPost.GetPostQueryHandler">
            <summary>
                Handler para a query de informações de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.GetPost.GetPostQueryHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de informações de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.GetPost.GetPostQueryHandler.HandleAsync(SocialService.Post.GetPost.GetPostQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter as informações de um post
            </summary>
            <param name="item"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.GetPost.GetPostQueryValidator">
            <summary>
                Validador para a query de busca de post.
            </summary>
        </member>
        <member name="M:SocialService.Post.GetPost.GetPostQueryValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para a query de busca de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.Post">
            <summary>
                Classe que representa um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.Post.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:SocialService.Post.Post.#ctor(SocialService.Post.CreatePost.CreatePostCommand)">
            <summary>
                Construtor para criar um novo post.
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:SocialService.Post.Post.PublisherId">
            <summary>
            Id do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.PublisherFirstName">
            <summary>
            Primeiro nome do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.PublisherLastName">
            <summary>
            Sobrenome do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.PublisherImageUrl">
            <summary>
            Url da imagem do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.Visibility">
            <summary>
                Visibilidade do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.CreatedAt">
            <summary>
                Data de criação do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.UpdatedAt">
            <summary>
                Data de atualização do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.Images">
            <summary>
                Ids das imagens do post
            </summary>
        </member>
        <member name="P:SocialService.Post.Post.Content">
            <summary>
                Conteúdo do post.
            </summary>
        </member>
        <member name="M:SocialService.Post.Post.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados do neo4j para a entidade.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SocialService.Post.Post.UpdateVisibility(System.Nullable{SocialService.Post.Common.Enums.EPostVisibility},System.Boolean)">
            <summary>
                Método para atualizar a visibilidade do post.
            </summary>
            <param name="visibility"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Post.Post.UpdateContent(System.String,System.Boolean)">
            <summary>
                Método para atualizar o conteúdo do post.
            </summary>
            <param name="content"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="T:SocialService.Post.PostController">
            <summary>
                Controller responsavel por gerenciar funções relacionadas a posts, comentários e reações.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.PostController.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Controller responsavel por gerenciar funções relacionadas a posts, comentários e reações.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.PostController.GetPost(SocialService.Common.Interfaces.IHandler{SocialService.Post.PostDto,SocialService.Post.GetPost.GetPostQuery},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para pegar as informações de um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.GetPostsByProfileId(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Post.PostDto},SocialService.Post.GetPostsByProfileId.GetPostsByProfileIdQuery},SocialService.Profile.Common.Repository.IProfileGraphRepository,System.Guid,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
                Rota para pegar informações dos posts feitos por um perfil
            </summary>
            <param name="handler"></param>
            <param name="profileGraphRepository"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.CreatePost(SocialService.Common.Interfaces.IHandler{SocialService.Post.PostDto,SocialService.Post.CreatePost.CreatePostCommand},SocialService.Post.CreatePost.CreatePostCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para criar um post
            </summary>
            <param name="handler"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.UploadPostImages(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.UploadPostImages.UploadPostImageCommand},System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},System.Threading.CancellationToken)">
            <summary>
                Rota para fazer upload de imagens em um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="files"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.DeletePost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.DeletePost.DeletePostCommand},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para deletar um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.EditPost(SocialService.Common.Interfaces.IHandler{SocialService.Post.PostDto,SocialService.Post.EditPost.EditPostCommand},System.Guid,SocialService.Post.EditPost.EditPostCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para editar um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.CommentOnPost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand},System.Guid,SocialService.Post.Comment.CommentOnPost.CommentOnPostCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para comentar em um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.GetPostComments(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Post.Comment.Comment},SocialService.Post.Comment.GetPostComments.GetPostCommentsQuery},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para pegar os comentários de um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.EditCommentOnPost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand},System.Guid,SocialService.Post.Comment.EditCommentOnPost.EditCommentOnPostCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para editar um comentário em um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.DeleteCommentOnPost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.Comment.DeleteCommentOnPost.DeleteCommentOnPostCommand},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para deletar um comentário em um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.ReactToPost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.React.ReactToPost.ReactToPostCommand},System.Guid,SocialService.Post.React.ReactToPost.ReactToPostCommand,System.Threading.CancellationToken)">
            <summary>
                Rotas para reagir a um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.GetReactionsOnPost(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Post.React.Reaction},SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQuery},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para pegar as reações de um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Post.PostController.DeleteReactionFromPost(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommand},System.Guid,System.Threading.CancellationToken)">
            <summary>
                Rota para deletar uma reação de um post
            </summary>
            <param name="handler"></param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.PostDto">
            <summary>
                Objeto de transferência de dados para post
            </summary>
            <param name="post"></param>
        </member>
        <member name="M:SocialService.Post.PostDto.#ctor(SocialService.Post.Post)">
            <summary>
                Objeto de transferência de dados para post
            </summary>
            <param name="post"></param>
        </member>
        <member name="P:SocialService.Post.PostDto.Id">
            <summary>
            Id do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.PublisherId">
            <summary>
            Id do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.PublisherFirstName">
            <summary>
            Primeiro nome do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.PublisherLastName">
            <summary>
            Sobrenome do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.PublisherImageUrl">
            <summary>
            Url da imagem do perfil que publicou o post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.Visibility">
            <summary>
                Visibilidade do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.Images">
            <summary>
                Urls das imagens do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.PostDto.Content">
            <summary>
                Conteúdo do post.
            </summary>
        </member>
        <member name="M:SocialService.Post.PostDto.SetImages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Método para setar as imagens do post.
            </summary>
            <param name="images"></param>
        </member>
        <member name="M:SocialService.Post.PostDto.SetPublisherImageUrl(System.String)">
            <summary>
            Método para setar a url da imagem do perfil que publicou o post.
            </summary>
            <param name="imageUrl"></param>
        </member>
        <member name="T:SocialService.Post.PostModule">
            <summary>
                Modulo para resolver as dependências relacionadas a postagens
            </summary>
        </member>
        <member name="M:SocialService.Post.PostModule.ConfigurePostRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a postagens
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommand">
            <summary>
                Comando para deletar uma reação de um post
            </summary>
        </member>
        <member name="P:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommand.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="M:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommand.SetPostId(System.Guid)">
            <summary>
                Método para set o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommandHandler">
            <summary>
                Handler para deletar uma reação de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Handler para deletar uma reação de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommandHandler.HandleAsync(SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para deletar uma reação de um post
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommandValidator">
            <summary>
                Validador para o comando de deletar uma reação de um post
            </summary>
        </member>
        <member name="M:SocialService.Post.React.DeleteReactionFromPost.DeleteReactionFromPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de deletar uma reação de um post
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQuery">
            <summary>
                Query para pegar reações em um post.
            </summary>
        </member>
        <member name="P:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQuery.PostId">
            <summary>
                Id do post.
            </summary>
        </member>
        <member name="M:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQuery.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post.
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQueryHandler">
            <summary>
                Handler para a query de pegar reações em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQueryHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Handler para a query de pegar reações em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQueryHandler.HandleAsync(SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQuery,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com a query de pegar reações em um post.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQueryValidator">
            <summary>
                Validador para a query de buscar reações em um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.React.GetReactionsOnPost.GetReactionsOnPostQueryValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para a query de buscar reações em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.React.Reaction">
            <summary>
                Classe que representa uma reação
            </summary>
        </member>
        <member name="M:SocialService.Post.React.Reaction.#ctor">
            <summary>
                Construtor padrão
            </summary>
        </member>
        <member name="M:SocialService.Post.React.Reaction.#ctor(System.Guid,SocialService.Post.React.ReactToPost.ReactToPostCommand)">
            <summary>
                Construtor para criar uma nova reação.
            </summary>
            <param name="profileId"></param>
            <param name="command"></param>
        </member>
        <member name="P:SocialService.Post.React.Reaction.ProfileId">
            <summary>
                Id do perfil que reagiu
            </summary>
        </member>
        <member name="P:SocialService.Post.React.Reaction.CreatedAt">
            <summary>
                Data de criação da reação
            </summary>
        </member>
        <member name="P:SocialService.Post.React.Reaction.ReactionType">
            <summary>
                Tipo da reação
            </summary>
        </member>
        <member name="P:SocialService.Post.React.Reaction.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="M:SocialService.Post.React.Reaction.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados do neo4j para a entidade
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SocialService.Post.React.Reaction.UpdateReactionType(System.String)">
            <summary>
                Método para atualizar o tipo de reação.
            </summary>
            <param name="reactionType"></param>
        </member>
        <member name="T:SocialService.Post.React.ReactToPost.ReactToPostCommand">
            <summary>
                Comando para reagir a um post.
            </summary>
        </member>
        <member name="P:SocialService.Post.React.ReactToPost.ReactToPostCommand.PostId">
            <summary>
                Id do post
            </summary>
        </member>
        <member name="P:SocialService.Post.React.ReactToPost.ReactToPostCommand.ReactionType">
            <summary>
                Tipo de reação
            </summary>
        </member>
        <member name="M:SocialService.Post.React.ReactToPost.ReactToPostCommand.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.React.ReactToPost.ReactToPostCommandHandler">
            <summary>
                Handler para o comando de like em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.ReactToPost.ReactToPostCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Common.Services.INotificationPublisher)">
            <summary>
                Handler para o comando de like em um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Post.React.ReactToPost.ReactToPostCommandHandler.HandleAsync(SocialService.Post.React.ReactToPost.ReactToPostCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de like em um post.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Post.React.ReactToPost.ReactToPostCommandValidator">
            <summary>
                Validador para o comando de reação a um post.
            </summary>
        </member>
        <member name="M:SocialService.Post.React.ReactToPost.ReactToPostCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de reação a um post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Post.UploadPostImages.UploadPostImageCommand">
            <summary>
                Comando para criação de post.
            </summary>
        </member>
        <member name="P:SocialService.Post.UploadPostImages.UploadPostImageCommand.PostId">
            <summary>
                Id do post.
            </summary>
        </member>
        <member name="P:SocialService.Post.UploadPostImages.UploadPostImageCommand.Images">
            <summary>
                Lista de imagens a serem enviadas.
            </summary>
        </member>
        <member name="M:SocialService.Post.UploadPostImages.UploadPostImageCommand.SetImages(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.IFormFile},System.Threading.CancellationToken)">
            <summary>
                Método para setar as imagens.
            </summary>
            <param name="images"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SocialService.Post.UploadPostImages.UploadPostImageCommand.SetPostId(System.Guid)">
            <summary>
                Método para setar o id do post.
            </summary>
            <param name="postId"></param>
        </member>
        <member name="T:SocialService.Post.UploadPostImages.UploadPostImageCommandHandler">
            <summary>
                Handler para o comando de upload de imagens de um post.
            </summary>
            <param name="repository"></param>
            <param name="blobStorageProvider"></param>
        </member>
        <member name="M:SocialService.Post.UploadPostImages.UploadPostImageCommandHandler.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para o comando de upload de imagens de um post.
            </summary>
            <param name="repository"></param>
            <param name="blobStorageProvider"></param>
        </member>
        <member name="M:SocialService.Post.UploadPostImages.UploadPostImageCommandHandler.HandleAsync(SocialService.Post.UploadPostImages.UploadPostImageCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de upload de imagens de um post.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SocialService.Exceptions.NotFoundException"></exception>
        </member>
        <member name="T:SocialService.Post.UploadPostImages.UploadPostImageCommandValidator">
            <summary>
                Validador para o comando de upload de imagem de post.
            </summary>
        </member>
        <member name="M:SocialService.Post.UploadPostImages.UploadPostImageCommandValidator.#ctor(SocialService.Post.Common.Repository.IPostGraphRepository)">
            <summary>
                Validações para o comando de upload de imagem de post.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Profile.Common.Enums.EGender">
            <summary>
                Gênero do perfil.
            </summary>
        </member>
        <member name="F:SocialService.Profile.Common.Enums.EGender.Male">
            <summary>
                Masculino.
            </summary>
        </member>
        <member name="F:SocialService.Profile.Common.Enums.EGender.Female">
            <summary>
                Feminino.
            </summary>
        </member>
        <member name="T:SocialService.Profile.Common.Repository.IProfileGraphRepository">
            <summary>
                Interface para repositório de grafo sobre perfis.
            </summary>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.CreateProfileAsync(SocialService.Profile.Profile)">
            <summary>
                Método para criar um perfil no grafo.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.DeleteProfileAsync(System.Guid)">
            <summary>
                Método para deletar um perfil do grafo.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.GetProfileAsync(System.Guid)">
            <summary>
                Método para obter um perfil do grafo.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.UpdateProfileAsync(SocialService.Profile.Profile)">
            <summary>
                Método para atualizar um perfil no grafo.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.GetProfilesAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Método para obter perfis do grafo.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.IProfileGraphRepository.ProfileExistsAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil existe.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.Common.Repository.ProfileGraphRepository">
            <summary>
                Repositório de grafo sobre perfis.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositório de grafo sobre perfis.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.CreateProfileAsync(SocialService.Profile.Profile)">
            <summary>
                Método para criar um perfil
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.DeleteProfileAsync(System.Guid)">
            <summary>
                Método para deletar um perfil
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.GetProfileAsync(System.Guid)">
            <summary>
                Método para obter um perfil
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.UpdateProfileAsync(SocialService.Profile.Profile)">
            <summary>
                Método para atualizar um perfil
            </summary>
            <param name="profile"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.GetProfilesAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Método para obter perfis
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.Common.Repository.ProfileGraphRepository.ProfileExistsAsync(System.Guid)">
            <summary>
                Método para verificar se um perfil existe
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.CreateProfile.CreateProfileCommand">
            <summary>
                Comando para criar um perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.Email">
            <summary>
                Email do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.FirstName">
            <summary>
                Primeiro nome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.LastName">
            <summary>
                Sobrenome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.Country">
            <summary>
               País do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.PostalCode">
            <summary>
               CEP do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.DisplayName">
            <summary>
               Nome de exibição do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.Gender">
            <summary>
                Gênero do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.BirthDate">
            <summary>
                Data de nascimento do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.Bio">
            <summary>
                Biografia do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.CreateProfile.CreateProfileCommand.CreatedAt">
            <summary>
                Data de criação do perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetFirstName(System.String)">
            <summary>
                Método para set o primeiro nome do perfil
            </summary>
            <param name="firstName"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetLastName(System.String)">
            <summary>
                Método para set o sobrenome do perfil
            </summary>
            <param name="lastName"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetEmail(System.String)">
            <summary>
                Método para set o email do perfil
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetPostalCode(System.String)">
            <summary>
                Método para setar o CEP do perfil
            </summary>
            <param name="postalCode"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetDisplayName(System.String)">
            <summary>
            Método para setar o nome de exibição do perfil
            </summary>
            <param name="displayName"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommand.SetCountry(System.String)">
            <summary>
            Método para setar o país do perfil
            </summary>
            <param name="country"></param>
        </member>
        <member name="T:SocialService.Profile.CreateProfile.CreateProfileCommandHandler">
            <summary>
                Handler para o comando de criação de perfil.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommandHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.BrasilApi.IBrasilApi)">
            <summary>
                Handler para o comando de criação de perfil.
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommandHandler.HandleAsync(SocialService.Profile.CreateProfile.CreateProfileCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de criação de perfil.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.CreateProfile.CreateProfileCommandValidator">
            <summary>
                Validador para o comando de criação de perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.CreateProfile.CreateProfileCommandValidator.#ctor">
            <summary>
                Validação para o comando de criação de perfil
            </summary>
        </member>
        <member name="T:SocialService.Profile.DeleteProfile.DeleteProfileCommand">
            <summary>
                Comando para deletar um perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.DeleteProfile.DeleteProfileCommand.#ctor(System.Guid)">
            <summary>
                Comando para deletar um perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.DeleteProfile.DeleteProfileCommand.ProfileId">
            <summary>
                Identificador do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Profile.DeleteProfile.DeleteProfileCommandHandler">
            <summary>
                Handler para o comando de deletar um perfil
            </summary>
            <param name="blobStorageProvider"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.DeleteProfile.DeleteProfileCommandHandler.#ctor(SocialService.Connections.Storage.IBlobStorageProvider,SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Handler para o comando de deletar um perfil
            </summary>
            <param name="blobStorageProvider"></param>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.DeleteProfile.DeleteProfileCommandHandler.HandleAsync(SocialService.Profile.DeleteProfile.DeleteProfileCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de deletar um perfil
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SocialService.Profile.DeleteProfile.DeleteProfileCommandValidator">
            <summary>
                Validador para o comando de deletar um perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.DeleteProfile.DeleteProfileCommandValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para o comando de deletar um perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Profile.EditProfile.EditProfileCommand">
            <summary>
                Comando para editar um perfil
            </summary>
            <param name="gender"></param>
            <param name="birthDate"></param>
            <param name="bio"></param>
        </member>
        <member name="M:SocialService.Profile.EditProfile.EditProfileCommand.#ctor(System.Nullable{SocialService.Profile.Common.Enums.EGender},System.Nullable{System.DateTime},System.String)">
            <summary>
                Comando para editar um perfil
            </summary>
            <param name="gender"></param>
            <param name="birthDate"></param>
            <param name="bio"></param>
        </member>
        <member name="P:SocialService.Profile.EditProfile.EditProfileCommand.Gender">
            <summary>
                Gênero do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.EditProfile.EditProfileCommand.BirthDate">
            <summary>
                Data de nascimento do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.EditProfile.EditProfileCommand.Bio">
            <summary>
                Biografia do perfil
            </summary>
        </member>
        <member name="T:SocialService.Profile.EditProfile.EditProfileCommandHandler">
            <summary>
                Handler para o comando de edição de perfil
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.EditProfile.EditProfileCommandHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.BrasilApi.IBrasilApi)">
            <summary>
                Handler para o comando de edição de perfil
            </summary>
            <param name="graphRepository"></param>
        </member>
        <member name="M:SocialService.Profile.EditProfile.EditProfileCommandHandler.HandleAsync(SocialService.Profile.EditProfile.EditProfileCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de edição de perfil.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SocialService.Profile.EditProfile.EditProfileCommandValidator">
            <summary>
                Validador para o comando de editar um perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.EditProfile.EditProfileCommandValidator.#ctor">
            <summary>
                Validação para o comando de editar um perfil
            </summary>
        </member>
        <member name="T:SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery">
            <summary>
                Query para obter fotos de perfil.
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
        </member>
        <member name="M:SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery.#ctor(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Query para obter fotos de perfil.
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
        </member>
        <member name="P:SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery.Page">
            <summary>
                Página atual.
            </summary>
        </member>
        <member name="P:SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery.Rows">
            <summary>
                Quantidade de registros por página.
            </summary>
        </member>
        <member name="T:SocialService.Profile.GetProfilePictures.GetProfilePicturesQueryHandler">
            <summary>
                Handler para a query de obter fotos de perfil.
                <param name="blobStorageProvider"></param>
            </summary>
        </member>
        <member name="M:SocialService.Profile.GetProfilePictures.GetProfilePicturesQueryHandler.#ctor(SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de obter fotos de perfil.
                <param name="blobStorageProvider"></param>
            </summary>
        </member>
        <member name="M:SocialService.Profile.GetProfilePictures.GetProfilePicturesQueryHandler.HandleAsync(SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com a query de obter fotos de perfil.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SocialService.Profile.GetProfilePictures.GetProfilePicturesQueryValidator">
            <summary>
                Validador para a query de obter fotos de perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.GetProfilePictures.GetProfilePicturesQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de obter fotos de perfil.
            </summary>
        </member>
        <member name="T:SocialService.Profile.GetProfilePictures.ProfilePicture">
            <summary>
                Classe para representar uma foto de perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.GetProfilePictures.ProfilePicture.#ctor(System.String,System.DateTime)">
            <summary>
                Classe para representar uma foto de perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.GetProfilePictures.ProfilePicture.ImageUrl">
            <summary>
                Caminho da imagem.
            </summary>
        </member>
        <member name="P:SocialService.Profile.GetProfilePictures.ProfilePicture.CreatedAt">
            <summary>
                Data de criação.
            </summary>
        </member>
        <member name="T:SocialService.Profile.Profile">
            <summary>
                Classe que representa o perfil do usuário.
            </summary>
        </member>
        <member name="M:SocialService.Profile.Profile.#ctor">
            <summary>
                Construtor padrão.
            </summary>
        </member>
        <member name="M:SocialService.Profile.Profile.#ctor(SocialService.Profile.CreateProfile.CreateProfileCommand,System.Guid,SocialService.Common.Services.BrasilApi.LocationInfoDto)">
            <summary>
                Construtor para criação de um novo perfil através de um comando.
            </summary>
            <param name="command"></param>
            <param name="id"></param>
            <param name="locationInfo"></param>
        </member>
        <member name="P:SocialService.Profile.Profile.Email">
            <summary>
                Email do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.FirstName">
            <summary>
                Primeiro nome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.LastName">
            <summary>
                Sobrenome do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Country">
            <summary>
            Pais do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.PostalCode">
            <summary>
                CEP do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Latitude">
            <summary>
            Latitude do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Longitude">
            <summary>
               Longitude do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.DisplayName">
            <summary>
                Nome de exibição do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Followers">
            <summary>
            Quantidade de seguidores do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Following">
            <summary>
            Quantidade de pessoas que o perfil segue.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Posts">
            <summary>
            Quantidade de posts do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.ImageUrl">
            <summary>
                Url da imagem do perfil no blob storage
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Bio">
            <summary>
                Biografia do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.BirthDate">
            <summary>
                Data de nascimento do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.Gender">
            <summary>
                Gênero do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.CreatedAt">
            <summary>
                Data de criação do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.Profile.UpdatedAt">
            <summary>
                Data de atualização do perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.Profile.MapToEntityFromNeo4j(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Método para mapear os dados do neo4j para o perfil
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateFirstName(System.String,System.Boolean)">
            <summary>
                Método para atualizar o primeiro nome do perfil.
            </summary>
            <param name="firstName"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateLastName(System.String,System.Boolean)">
            <summary>
                Método para atualizar o sobrenome do perfil.
            </summary>
            <param name="lastName"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateEmail(System.String,System.Boolean)">
            <summary>
                Método para atualizar o email do perfil.
            </summary>
            <param name="email"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateImage(System.String,System.Boolean)">
            <summary>
                Método para atualizar a imagem do perfil.
            </summary>
            <param name="imageUrl"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateBio(System.String,System.Boolean)">
            <summary>
                Método para atualizar a biografia do perfil.
            </summary>
            <param name="bio"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateGender(System.Nullable{SocialService.Profile.Common.Enums.EGender},System.Boolean)">
            <summary>
                Método para atualizar o gênero do perfil.
            </summary>
            <param name="gender"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateBirthDate(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
                Método para atualizar a data de nascimento do perfil.
            </summary>
            <param name="birthDate"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateDisplayName(System.String,System.Boolean)">
            <summary>
                Método para atualizar a cidade do perfil.
            </summary>
            <param name="displayName"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateCountry(System.String,System.Boolean)">
            <summary>
            Método para atualizar o país do perfil.
            </summary>
            <param name="country"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdatePostalCode(System.String,System.Boolean)">
            <summary>
                Método para atualizar o CEP do perfil.
            </summary>
            <param name="postalCode"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateLatitude(System.Double,System.Boolean)">
            <summary>
            Método para atualizar a latitude do perfil.
            </summary>
            <param name="latitude"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:SocialService.Profile.Profile.UpdateLongitude(System.Double,System.Boolean)">
            <summary>
            Método para atualizar a longitude do perfil.
            </summary>
            <param name="longitude"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="T:SocialService.Profile.ProfileController">
            <summary>
                Controller responsavel por gerenciar funções relacionadas ao perfil do usuario
            </summary>
        </member>
        <member name="M:SocialService.Profile.ProfileController.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Controller responsavel por gerenciar funções relacionadas ao perfil do usuario
            </summary>
        </member>
        <member name="M:SocialService.Profile.ProfileController.ViewProfile(System.Guid,SocialService.Common.Interfaces.IHandler{SocialService.Profile.ProfileDto,SocialService.Profile.ViewProfile.ViewProfileQuery},SocialService.Common.Interfaces.IHandler{SocialService.Profile.ProfileDto,SocialService.Profile.CreateProfile.CreateProfileCommand},System.Threading.CancellationToken)">
            <summary>
                Rota para visualizar um perfil
            </summary>
            <param name="profileId"></param>
            <param name="viewProfilehandler"></param>
            <param name="createProfileHandler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.ProfileController.ViewProfileSimplified(System.Guid,SocialService.Common.Interfaces.IHandler{SocialService.Profile.ProfileSimplifiedDto,SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQuery},System.Threading.CancellationToken)">
            <summary>
                Rota para visualizar um perfil simplificado
            </summary>
            <param name="profileId"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.ProfileController.EditProfile(SocialService.Common.Interfaces.IHandler{SocialService.Profile.ProfileDto,SocialService.Profile.EditProfile.EditProfileCommand},SocialService.Profile.EditProfile.EditProfileCommand,System.Threading.CancellationToken)">
            <summary>
                Rota para editar um perfil
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.ProfileController.DeleteProfile(System.Guid,SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Profile.DeleteProfile.DeleteProfileCommand},System.Threading.CancellationToken)">
            <summary>
                Rota para deletar um perfil
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.ProfileController.UploadProfilePicture(SocialService.Common.Interfaces.IHandler{System.Boolean,SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand},Microsoft.AspNetCore.Http.IFormFile,System.Threading.CancellationToken)">
            <summary>
                Rota para fazer upload de uma foto de perfil
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocialService.Profile.ProfileController.GetProfilePictures(System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Profile.GetProfilePictures.ProfilePicture},SocialService.Profile.GetProfilePictures.GetProfilePicturesQuery},System.Threading.CancellationToken)">
            <summary>
                Rota para obter fotos de perfil.
            </summary>
            <param name="profileId"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <param name="handler"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.ProfileDto">
            <summary>
                Objeto de transferência de dados do perfil
            </summary>
            <param name="profile"></param>
            <param name="state"></param>
            <param name="city"></param>
        </member>
        <member name="M:SocialService.Profile.ProfileDto.#ctor(SocialService.Profile.Profile,System.String,System.String)">
            <summary>
                Objeto de transferência de dados do perfil
            </summary>
            <param name="profile"></param>
            <param name="state"></param>
            <param name="city"></param>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Id">
            <summary>
                Id do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Email">
            <summary>
                Email do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.FirstName">
            <summary>
                Primeiro nome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.LastName">
            <summary>
                Sobrenome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Country">
            <summary>
            Pais do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.City">
            <summary>
                Cidade do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.State">
            <summary>
            Estado do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.DisplayName">
            <summary>
                Nome de exibição do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Followers">
            <summary>
            Quantidade de seguidores do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Following">
            <summary>
            Quantidade de pessoas que o perfil segue.
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Posts">
            <summary>
            Quantidade de posts do perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.ImageUrl">
            <summary>
                Url da imagem do perfil no blob storage
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Bio">
            <summary>
                Biografia do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.BirthDate">
            <summary>
                Data de nascimento do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileDto.Gender">
            <summary>
                Gênero do perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.ProfileDto.SetImageUrl(System.String)">
            <summary>
            Método para setar a url da imagem do perfil.
            </summary>
            <param name="imageUrl"></param>
        </member>
        <member name="T:SocialService.Profile.ProfileModule">
            <summary>
                Modulo para resolver as dependências relacionadas a perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.ProfileModule.ConfigureProfileRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a perfil
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.ProfileSimplifiedDto">
            <summary>
                Objeto de transferência de dados do perfil
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:SocialService.Profile.ProfileSimplifiedDto.#ctor(SocialService.Profile.Profile)">
            <summary>
                Objeto de transferência de dados do perfil
            </summary>
            <param name="profile"></param>
        </member>
        <member name="P:SocialService.Profile.ProfileSimplifiedDto.Id">
            <summary>
                Id do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileSimplifiedDto.FirstName">
            <summary>
                Primeiro nome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileSimplifiedDto.LastName">
            <summary>
                Sobrenome do perfil
            </summary>
        </member>
        <member name="P:SocialService.Profile.ProfileSimplifiedDto.ImageUrl">
            <summary>
            Url da imagem do perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.ProfileSimplifiedDto.SetImageUrl(System.String)">
            <summary>
            Método para setar a url da imagem do perfil.
            </summary>
            <param name="imageUrl"></param>
        </member>
        <member name="T:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand">
            <summary>
                Comando para upload de foto de perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand.Image">
            <summary>
                Imagem a ser enviada.
            </summary>
        </member>
        <member name="P:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand.ImageFileName">
            <summary>
                Nome do arquivo da imagem.
            </summary>
        </member>
        <member name="M:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand.SetImage(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
                Método para setar a imagem.
            </summary>
            <param name="image"></param>
            <param name="imageFileName"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommandHandler">
            <summary>
                Handler para o comando de upload de foto de perfil.
            </summary>
            <param name="repository"></param>
            <param name="blobStorageProvider"></param>
        </member>
        <member name="M:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommandHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para o comando de upload de foto de perfil.
            </summary>
            <param name="repository"></param>
            <param name="blobStorageProvider"></param>
        </member>
        <member name="M:SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommandHandler.HandleAsync(SocialService.Profile.UploadProfilePicture.UploadProfilePictureCommand,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com o comando de upload de foto de perfil.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQuery">
            <summary>
                Query para visualização de perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQuery.#ctor(System.Guid)">
            <summary>
                Query para visualização de perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQueryHandler">
            <summary>
                Handler para a query de visualização de perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de visualização de perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQueryHandler.HandleAsync(SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQuery,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com a query de visualização de perfil.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQueryValidator">
            <summary>
                Validador para a query de visualização de perfil
            </summary>
        </member>
        <member name="M:SocialService.Profile.ViewProfileSimplified.ViewProfileSimplifiedQueryValidator.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository)">
            <summary>
                Validações para a query de visualização de perfil
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:SocialService.Profile.ViewProfile.ViewProfileQuery">
            <summary>
                Query para visualização de perfil.
            </summary>
        </member>
        <member name="M:SocialService.Profile.ViewProfile.ViewProfileQuery.#ctor(System.Guid)">
            <summary>
                Query para visualização de perfil.
            </summary>
        </member>
        <member name="P:SocialService.Profile.ViewProfile.ViewProfileQuery.ProfileId">
            <summary>
                Id do perfil.
            </summary>
        </member>
        <member name="T:SocialService.Profile.ViewProfile.ViewProfileQueryHandler">
            <summary>
                Handler para a query de visualização de perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Profile.ViewProfile.ViewProfileQueryHandler.#ctor(SocialService.Profile.Common.Repository.IProfileGraphRepository,SocialService.Common.Services.BrasilApi.IBrasilApi,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de visualização de perfil.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Profile.ViewProfile.ViewProfileQueryHandler.HandleAsync(SocialService.Profile.ViewProfile.ViewProfileQuery,System.Threading.CancellationToken)">
            <summary>
                Método para lidar com a query de visualização de perfil.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Recommendation.Common.Repository.IRecommendationGraphRepository">
            <summary>
                Interface para o repositório de grafo de recomendações.
            </summary>
        </member>
        <member name="M:SocialService.Recommendation.Common.Repository.IRecommendationGraphRepository.GetFriendRecommendationsAsync(System.Guid)">
            <summary>
                Método para obter recomendações de amigos.
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Recommendation.Common.Repository.IRecommendationGraphRepository.GetFriendRecommendationsWithinDistanceAsync(System.Guid,System.Double)">
            <summary>
               Método para obter recomendações de amigos dentro de uma distância.
            </summary>
            <param name="profileId"></param>
            <param name="distanceInKm"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Recommendation.Common.Repository.RecommendationGraphRepository">
            <summary>
                Repositório de recomendações de amigos.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Recommendation.Common.Repository.RecommendationGraphRepository.#ctor(SocialService.Connections.Graph.GraphContext)">
            <summary>
                Repositório de recomendações de amigos.
            </summary>
            <param name="graphContext"></param>
        </member>
        <member name="M:SocialService.Recommendation.Common.Repository.RecommendationGraphRepository.GetFriendRecommendationsAsync(System.Guid)">
            <summary>
                Método para obter recomendações de amigos.
            </summary>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:SocialService.Recommendation.Common.Repository.RecommendationGraphRepository.GetFriendRecommendationsWithinDistanceAsync(System.Guid,System.Double)">
            <summary>
               Método para obter recomendações de amigos dentro de uma distância.
            </summary>
            <param name="profileId"></param>
            <param name="distanceInKm"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Recommendation.GetFriendRecommendations.FriendRecommendation">
            <summary>
                Classe de recomendação de amigos
                <param name="profile"></param>
                <param name="mutualFriends"></param>
            </summary>
        </member>
        <member name="M:SocialService.Recommendation.GetFriendRecommendations.FriendRecommendation.#ctor(SocialService.Profile.ProfileSimplifiedDto,System.Int32)">
            <summary>
                Classe de recomendação de amigos
                <param name="profile"></param>
                <param name="mutualFriends"></param>
            </summary>
        </member>
        <member name="P:SocialService.Recommendation.GetFriendRecommendations.FriendRecommendation.Profile">
            <summary>
                Informações do perfil
            </summary>
        </member>
        <member name="P:SocialService.Recommendation.GetFriendRecommendations.FriendRecommendation.MutualFriends">
            <summary>
                Quantidade de amigos em comum
            </summary>
        </member>
        <member name="T:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQuery">
            <summary>
                Query para obter recomendações de amigos
            </summary>
        </member>
        <member name="P:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQuery.Page">
            <summary>
                Página
            </summary>
        </member>
        <member name="P:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQuery.Rows">
            <summary>
                Quantidade de registros
            </summary>
        </member>
        <member name="T:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQueryHandler">
            <summary>
                Handler para a query de recomendações de amigos.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQueryHandler.#ctor(SocialService.Recommendation.Common.Repository.IRecommendationGraphRepository,SocialService.Connections.Storage.IBlobStorageProvider)">
            <summary>
                Handler para a query de recomendações de amigos.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQueryHandler.HandleAsync(SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQuery,System.Threading.CancellationToken)">
            <summary>
                Método para obter recomendações de amigos.
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQueryValidator">
            <summary>
                Validador para a query de obter recomendações de amigos.
            </summary>
        </member>
        <member name="M:SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQueryValidator.#ctor">
            <summary>
                Validações para a query de obter recomendações de amigos.
            </summary>
        </member>
        <member name="T:SocialService.Recommendation.RecomendationModule">
            <summary>
                Modulo para resolver as dependências relacionadas a postagens
            </summary>
        </member>
        <member name="M:SocialService.Recommendation.RecomendationModule.ConfigureRecomendationRelatedDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Método para resolver as dependências relacionadas a recomendações
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:SocialService.Recommendation.RecommendationController">
            <summary>
                Controller responsavel por gerenciar as recomendações de amigos
            </summary>
        </member>
        <member name="M:SocialService.Recommendation.RecommendationController.GetFriendRecommendations(SocialService.Common.Interfaces.IHandler{System.Collections.Generic.IEnumerable{SocialService.Recommendation.GetFriendRecommendations.FriendRecommendation},SocialService.Recommendation.GetFriendRecommendations.GetFriendRecommendationQuery},System.Threading.CancellationToken)">
            <summary>
                Rota para receber recomendações de amigos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Refit.Implementation.Generated">
            <inheritdoc />
        </member>
        <member name="T:Refit.Implementation.Generated.SocialServiceCommonServicesBrasilApiIBrasilApi">
            <inheritdoc />
        </member>
        <member name="P:Refit.Implementation.Generated.SocialServiceCommonServicesBrasilApiIBrasilApi.Client">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.SocialServiceCommonServicesBrasilApiIBrasilApi.#ctor(System.Net.Http.HttpClient,Refit.IRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.SocialServiceCommonServicesBrasilApiIBrasilApi.GetLocationInfoByPostalCodeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.SocialServiceCommonServicesBrasilApiIBrasilApi.SocialService#Common#Services#BrasilApi#IBrasilApi#GetLocationInfoByPostalCodeAsync(System.String)">
            <inheritdoc />
        </member>
    </members>
</doc>
